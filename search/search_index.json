{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Kadena Docs \u00b6 Content is divided into the following pages: What is Kadena? \u00b6 A brief introduction to the Kadena platform, including general resources for Chainweb, Pact, and Kuro. What is KDA? \u00b6 Information regarding Kadena\u2019s native cryptocurrency, KDA. Kadena FAQ \u00b6 Answers to common questions about Kadena. Public Chain Interaction \u00b6 A comprehensive list of resources and guides relevant to interacting with Kadena\u2019s public blockchain. Private Chain Deployment \u00b6 Documentation and trial resources for evaluation and deployment of Kadena\u2019s private blockchain. The purpose of this site is to provide a single source for essential Kadena information. This documentation is open source and hosted on GitHub which means that anyone can contribute. The goal is to provide information that is relevant, concise, unbiased and current. Can't find what you're looking for? Reach out to the Kadena team on Discord and get support from within any of the dedicated channels DISCLAIMER : This site is an open source knowledge base featuring content contributions from both Kadena and its community. Nothing contained in this Github repository should be considered financial or investment advice - it is for informational purposes only.","title":"**Welcome to Kadena Docs**"},{"location":"#welcome-to-kadena-docs","text":"Content is divided into the following pages:","title":"Welcome to Kadena Docs"},{"location":"#what-is-kadena","text":"A brief introduction to the Kadena platform, including general resources for Chainweb, Pact, and Kuro.","title":"What is Kadena?"},{"location":"#what-is-kda","text":"Information regarding Kadena\u2019s native cryptocurrency, KDA.","title":"What is KDA?"},{"location":"#kadena-faq","text":"Answers to common questions about Kadena.","title":"Kadena FAQ"},{"location":"#public-chain-interaction","text":"A comprehensive list of resources and guides relevant to interacting with Kadena\u2019s public blockchain.","title":"Public Chain Interaction"},{"location":"#private-chain-deployment","text":"Documentation and trial resources for evaluation and deployment of Kadena\u2019s private blockchain. The purpose of this site is to provide a single source for essential Kadena information. This documentation is open source and hosted on GitHub which means that anyone can contribute. The goal is to provide information that is relevant, concise, unbiased and current. Can't find what you're looking for? Reach out to the Kadena team on Discord and get support from within any of the dedicated channels DISCLAIMER : This site is an open source knowledge base featuring content contributions from both Kadena and its community. Nothing contained in this Github repository should be considered financial or investment advice - it is for informational purposes only.","title":"Private Chain Deployment"},{"location":"Chainweaver-Support/","text":"Chainweaver User Guide \u00b6 Getting Started \u00b6 Installing the Chainweaver software \u00b6 Chainweaver is available for download in three formats to accommodate users\u2019 preference in operating system; (1) .dmg for Mac, (2) .deb for Linux, (3) and .ova for Windows, Linux, and Mac as a virtual appliance .dmg for Mac \u00b6 Compatible with macOS High Sierra 10.13 and above Download the .dmg from https://www.kadena.io/chainweaver Navigate to your downloads folder, open the .dmg, and drag the application into your Applications folder. .deb for Linux \u00b6 Compatible with Ubuntu 18.04 Download the .deb from https://www.kadena.io/chainweaver . Navigate to your downloads folder and double click the .deb. Click the install button on the install window that pops up. There should be a progress bar that appears and progresses to completion until you see this installed state. Be sure to check that the installed version is the one that you tried to install. You can now find chainweaver in the applications menu. With this icon Help See the Chainweaver Troubleshoot page if you encountered issues installing the .deb .ova for Windows, Linux, and Mac \u00b6 First, make sure that you have VirtualBox installed as this virtualisation app is required to run the OVA. Download the .ova from https://www.kadena.io/chainweaver . Navigate to your downloads folder and double click the .ova. You should get an import virtual appliance dialog which you can safely accept the defaults and press import. Once this is imported, you can run the virtual machine by double clicking \"Kadena Chainweaver VM\" in the list of VMs. This will start the virtual machine and it will boot like a normal computer. Eventually you should see chainweaver like this. Help See the Chainweaver Troubleshoot page if you encountered issues installing the .ova Create a new wallet or restore an existing wallet \u00b6 Create a new wallet There are three main steps to create a new wallet; (1) set password, (2) record recovery phrase, (3) verify recovery phrase \u200bSet password: Create a strong, secret, and unique password. See the Basic Safety Tips section for suggestions on password generation. Record recovery phrase: Mouse over each of the 12 words to view and record your recovery phrase. See the Basic Safety Tips section for suggestions on securing your recovery phrase. Verify recovery phrase: Enter each word in the correct order to verify that you have correctly recorded your recovery phrase. Restore existing wallet There are three main steps to restore an existing wallet; (1) enter recovery phrase, (2) set new password, (3) re-generate keys Enter recovery phrase: Follow the guidance to enter your 12-word recovery phrase. Set new password: Input a new password for your existing wallet. Re-generate keys: From the Keys section, select the Generate Key button to restore keys. These keys are deterministically generated meaning that the same keys will always appear in the same order by using the recovery phrase as a master seed. Repeat selecting the Generate Key button until all necessary keys are restored. Interface overview \u00b6 \u200bChainweaver's interface consists of three main elements; (1) Network Display, (2) Sections Menu, (3) Main Viewer Network Display (top bar) This display bar persists across all screen views within Chainweaver so that you will always know the network with which you are interacting Sections Menu (left bar) Use this menu to go to different Sections Keys: Display of all public keys generated within the wallet Accounts: Display of all added accounts and their status across chains. Deposit and withdraw KDA. Contracts: Write, deploy and interact with smart contracts Resources: Reference helpful support materials Settings: Configure wallet and network settings Logout: Log out of the desktop application Main Viewer (center screen) This is where you interact with the section you have chosen from the Sections Menu. Update to the latest version of Chainweaver \u00b6 Upgrading Chainweaver is an essential part of keeping your crypto assets safe and enjoying new features for interacting with the Kadena blockchain ecosystem. The latest version of Chainweaver will always be available for download at https://www.kadena.io/chainweaver . \u200bNote: Ensure you have a secure connection before downloading any applications. Most issues can be resolved simply by updating to the latest version of Chainweaver. Networks \u00b6 Different networks in Chainweaver \u00b6 Chainweaver allows you to interact with different networks, including the main network (\u201cMainnet\u201d) and a test network (\u201cTestnet\u201d) Mainnet is the primary live blockchain network where assets of value can be transferred and smart contract services can be called. Testnet is a network with which you can safely test various blockchain interactions without the risk of losing valuable assets. Both Mainnet and Testnet are fully operational, real blockchains. It is only Testnet, however, where you can acquire KDA coins for free from a coin faucet . Naturally, account balances cannot move between networks. Change networks \u00b6 You can change the network with which you are actively interacting by selecting the drop-down arrows beside the displayed network in the Network Display top bar. Simply select the desired network from the available list and confirm the selection. The keys displayed in the wallet will persist across networks, while the accounts list will refresh to display those that you have added on the chosen network. Create a custom network \u00b6 You can add your own custom network by selecting the appropriate option from the Settings section. \u200b To create a new network, you will have to define a network name then enter the addresses for the nodes to which you would like the network to connect. Node status is displayed with a traffic light style indicator. Note Custom networks are defined locally and will only be visible within the application that created it. It is recommended that a network connect to at least 3 nodes. Keys and Accounts \u00b6 Understanding Keys vs. Accounts \u00b6 In brief, Keys sign transactions and Accounts may be governed by one or multiple keys. With most blockchains, accounts are modeled as simply public/private keypairs. This one-to-one model keeps things simple, but runs into problems when account control requires a many-to-many model (such as with jointly owned or majority ruled accounts). Kadena natively supports multiple keys governing the same account, and thus the distinction between Keys and Accounts becomes important. Every Account is governed by a keyset which must be defined when creating any Account. Keysets are composed of two parts; (1) a set of keys and (2) a predicate Set of keys: a list of public keys that are associated to the account Predicate: a governance function that determines which keys are allowed to make choices for the account when it comes to transactions (e.g. do all keys need to be present? only one? two? etc.) Summarily, keysets look like the following as JSON data: { \"keys\": [\"pubkey1\", \"pubkey2\",...,\"pubkeyN\"], \"pred\": \"some governance function\" } When signing a transaction, the list of private keys supplied as signing key pairs will be checked against the keyset and predicate to ensure that not only are all keys that need to be present accounted for but that the predicate is satisfied. Generate a Key \u00b6 The first step towards transacting on the Kadena blockchain is to generate a key pair. Begin by selecting the \u201c+ Generate Key\u201d button, then continue to Accounts. Add an Account \u00b6 Accounts are effectively equivalent to your identity on the blockchain. When you add an Account in Chainweaver, you will be able to view information about it such as its keyset info and balance on each of the known chains. Select \u201c+ Add Account\u201d to view existing accounts or create a new account. Optionally, you can add personal notes beside any account. This field is never seen by the blockchain, and only serves as a personal reference to organize a user\u2019s wallet. Create an account \u00b6 Begin by entering the desired account\u2019s name within the \u201c+ Add Account\u201d dialog to see whether it already exists. If the account is available, you will see a \u201c+ Create Account\u201d button in the corresponding Chain ID row as well as an account balance of \u201cDoes not exist.\u201d Select the \u201c+ Create Account\u201d button beside the desired account\u2019s Chain ID row to open the dialog. Fill in the required fields to define the account\u2019s keyset. Since adding any record to the blockchain necessitates a transaction, you too must submit a transaction in order to permanently claim the account\u2019s name on the blockchain. As with all transactions, a nominal amount of gas must be paid in order to execute the transaction. If some account in your wallet has funds on the same chain as the desired new account, you may select \u201cI am the Gas Payer\u201d to complete the transaction flow by paying for the gas yourself. If you do not have any funds, you may select \u201cI am not the Gas Payer\u201d to view and copy the Tx Builder which contains all of the account info you have just configured. Share this Tx Builder data with someone else to pay the gas for the transaction to create the account for you. Remember that the Kadena public blockchain network is comprised of many chains braided together. In effect, each chain is a standalone blockchain, therefore you will have to create your desired account on each chain for which you want it to exist. Naturally, the same account name will have a different account balance on each chain, and may also have different owners or a different keyset. Always be sure to take note of the chain on which you are transacting. Remove an account \u00b6 To remove an account from view, begin by selecting the Details button in the desired account row to reveal Account Details. Near the bottom of the Account Details dialog, select \u201cRemove Account\u201d Read the warning message and confirm your selection by selecting \u201cRemove Account\u201d Transactions \u00b6 Signing transactions in Chainweaver is different from most crypto wallets in two distinct ways; the concepts of (1) Tx Builder and (2) granting capabilities each provide the user with greater transparency and control. Tx Builder This is a JSON blob including the necessary information to build a transaction. For simple transfers it might include just an account name and chain ID, like this: { \"account\": \"alice\", \"chain\": \"5\" } For account creation it might also include a keyset, like this: { \"account\": \"alice\", \"chain\": \"5\", \"keyset\": { \"keys\": [\"368698bf0354b0c04884a185a7eefd20500562cad23bf9c25eee53ddc0ba7d7b\"], \"pred\": \"keys-all\" } } While users will never need to compose this code themselves, it is important to become familiar with reading it to understand how some blockchain operations work. Granting capabilities Performing transfers necessitates a call to the blockchain\u2019s coin contract. This contract describes the rules for transferring coins and one such rule requires that the Sender account grant the capability to transfer coins in order for the transaction to be submitted. The act of granting capabilities is akin to authorizing or signing a transaction. In more advanced scenarios some contracts require multiple capabilities to be granted. This concept gives the user greater control and transparency to what they are signing. Receive Kadena (KDA) \u00b6 To receive KDA, you must first share your Tx Builder with another person from whom you wish to receive a payment. To access your Tx Builder, navigate to the Accounts section and select the \u201cReceive\u201d button beside the desired account\u2019s chain ID row. This will open the Receive dialog from which you can copy the Tx Builder and share with others. \u200b One additional feature for experienced users is the ability to transfer KDA from compatible accounts that were not generated within Chainweaver. You can access this feature from the Receive dialog by expanding the menu-field under the sub-section \u201cOption 2: Transfer from non-Chainweaver Account.\u201d Fill in the required fields to Submit Transfer. Send Kadena (KDA) \u00b6 Since the Kadena public blockchain network braids multiple chains together, you can transfer KDA in two ways; (1) transfer between the same chain and (2) transfer between different chains. Transfer between the same chain Navigate to the Account section and select the \u201cSend\u201d button beside the desired account\u2019s chain ID row from which you would like to transfer funds. This will open the Send dialog which is divided into two parts; Configuration and Sign: Configure the transaction Recipient: Enter the recipient\u2019s Tx Builder and amount to send Transaction Settings: Choose the transaction speed and expiration Sign the transaction Gas Payer: Select an account to sign and pay the transaction gas Once all required fields have been entered, select the \u201cPreview\u201d button. Here you will be able to review and confirm details before submitting the transaction. Transfer between different chains This process has one distinct difference from transfers on the same chain. This time when you sign the transaction, you must select two Gas Payers: Gas payer on the originating chain to initiate the transfer Gas payer on the destination chain to redeem the transfer It may seem unusual to have to pay for gas twice, but consider what is happening with a cross-chain transfer. In this scenario you are moving coins between two different blockchains, each with their own ledger. Therefore gas on one chain cannot pay for executing operations on a different chain. Adjust gas price and gas limit \u00b6 Before you submit any transaction or deploy any smart contract, you will have the opportunity to configure a few settings. You can adjust both the Gas Price and the Gas Limit of your transaction. As either of these settings are adjusted, you can see how these changes might affect Transaction Speed and Max Transaction Fee. Note Chainweaver does not charge a fee to send or receive a transaction. All transaction fees go directly to miners as compensation for providing the compute power required to execute the operation. Track your transaction \u00b6 Once a transaction has been submitted, Chainweaver will display the Transaction Status as it moves through progress states. The average block time in the Kadena network is 30 seconds. So depending on the Transaction Speed you assigned, it may take several blocks before your transaction is successfully mined. Transaction success: When the transaction has been successfully mined in a block, a Transaction Result will display. Transaction failure: If the transaction fails at any progress state then a red \u201cX\u201d will appear beside the failing state. Smart Contracts \u00b6 The ability to write, deploy, and call smart contracts from within Chainweaver makes it one of the most comprehensive workbench tools for blockchain. Navigate to the Contracts section and utilize the integrated development environment (IDE) for developing and testing Pact smart contracts. Pact is the safe and simple smart contract language used for interacting with the Kadena blockchain. Visit https://pactlang.org/ for developer tutorials covering key concepts and real projects you can deploy yourself. Deploy your own smart contract \u00b6 Once you have written the code for your new smart contract in the code editor, check the ENV tab of the tool panel on the right side for any error messages that might be displayed. Once you are satisfied with your code, you can either select \u201cLoad into REPL\u201d or \u201cDeploy.\u201d \u201cLoad into REPL\u201d will execute the editor text within the local REPL environment so that you can test and interact with the contract \u201cDeploy\u201d will begin the process of configuring the smart contract for execution on the blockchain Should you select \u201cDeploy,\u201d you will next be prompted to designate the transaction destination and settings. On the \u201cSign\u201d tab you must enter any new capabilities as defined in your contract code, then select the account to authorize each capability. Once all required fields have been entered, select the \u201cPreview\u201d button. Here you will be able to review and confirm details before submitting the transaction. Call an existing smart contract \u00b6 Once a contract has been deployed, it will show up in the \u201cDeployed Contracts\u201d table under the \u201cModule Explorer\u201d tab of the Contracts tool panel. Contracts can be filtered by chain or through search. Select \u201cView\u201d beside your chosen contract to reveal all of the available functions to call. Select \u201cCall\u201d beside your chosen function to open a three-part dialog: Parameters: enter the required parameters Configuration: choose the transaction settings Sign: grant the required capabilities Preview the transaction, then select \u201cCreate Transaction\u201d to execute the operation. Interact with Dapps \u00b6 As a user, interacting with dapps is simple. Chainweaver takes advantage of a novel wallet signing API which facilitates communication between dapps and wallets. First ensure your Chainweaver desktop application is open. When you\u2019re ready to start some transaction with a dapp, initiate the request by submitting the required information (e.g. account name) to the dapp. Once a call has been made, by pressing a button on the dapp interface or through some other means, the signing API will hit Chainweaver. When Chainweaver receives an API call, a new dialog will appear within Chainweaver displaying input data from the dapp. Review the transaction details and complete the flow as you would for any other transaction; configure settings, grant capabilities, preview and create. Security and Access \u00b6 Key pair generation \u00b6 Kadena uses Ed25519 public/private key pair signatures. Chainweaver can be used to easily generate compatible key pairs. Alternatively, you can generate key pairs yourself by following any kind of Ed25519 key generation method such as this one contributed to our community GitHub. Learn more about Ed25519 here ). Basic safety tips \u00b6 As with any valuable asset, it is important to establish a secure and reliable method for controlling who has access to it. While Chainweaver is designed to satisfy strict security standards, you are ultimately responsible for maintaining the security of your wallet\u2019s access credentials\u2014the password and recovery phrase. Passwords : Consider using a password manager to generate a strong password with randomness of character types. If you decide to create a password yourself, make sure it is not the same or similar to any other password you have ever used. Recovery phrases : This 12-word phrase is the master seed that generates all your wallet\u2019s public/private key pairs. With this phrase, anyone can control your wallet, even from another device. Consider securing more than one copy to prevent a single point of failure from events like fires, loss, etc. Kadena does not control any of your personal/private data on our servers. Never share passwords or recovery phrases with anyone, including the Kadena team. We will never ask for you to provide this. If someone claims that we do, insist on not sharing. Who can access your account \u00b6 Anyone with your wallet's password, private keys or recovery phrase can access your account. Passwords, private keys, and recovery phrases are in the users\u2019 hands and are the users\u2019 responsibility. Chainweaver is simply an interface that allows you to more easily interact with your accounts and the Kadena blockchain. Lost password and/or recovery phrase \u00b6 Lost password If you lose your password, you can reset it by using your 12-word recovery phrase to restore the wallet with a new password. Lost both password and recovery phrase If you lose both your password and recovery phrase, you will permanently lose access to any accounts and their funds forever. Kadena does not manage accounts with information such as passwords, private keys, or recovery phrases. We only have access to the information that is publicly available on the blockchain. We do not have servers and we do not hold your assets. Log out \u00b6 The \u201cLog out\u201d button in the lower-left of the Section menu will lock your wallet. A locked wallet cannot sign transactions or receive signing API calls. Codebase \u00b6 To find out about the latest improvements to Chainweaver, view all activity available at the open-source repository on GitHub here . Contact \u00b6 Authorized Communications \u00b6 Kadena staff will never ask for sensitive information, including passwords, recovery phrases or private keys. Beware of fake accounts and scam attempts. Chainweaver will only communicate through verified channels. Chat \u00b6 Join our Discord server here and chat live with Kadena developers and the community on the #chainweaver channel","title":"Chainweaver Support"},{"location":"Chainweaver-Support/#chainweaver-user-guide","text":"","title":"Chainweaver User Guide"},{"location":"Chainweaver-Support/#getting-started","text":"","title":"Getting Started"},{"location":"Chainweaver-Support/#installing-the-chainweaver-software","text":"Chainweaver is available for download in three formats to accommodate users\u2019 preference in operating system; (1) .dmg for Mac, (2) .deb for Linux, (3) and .ova for Windows, Linux, and Mac as a virtual appliance","title":"Installing the Chainweaver software"},{"location":"Chainweaver-Support/#dmg-for-mac","text":"Compatible with macOS High Sierra 10.13 and above Download the .dmg from https://www.kadena.io/chainweaver Navigate to your downloads folder, open the .dmg, and drag the application into your Applications folder.","title":".dmg for Mac"},{"location":"Chainweaver-Support/#deb-for-linux","text":"Compatible with Ubuntu 18.04 Download the .deb from https://www.kadena.io/chainweaver . Navigate to your downloads folder and double click the .deb. Click the install button on the install window that pops up. There should be a progress bar that appears and progresses to completion until you see this installed state. Be sure to check that the installed version is the one that you tried to install. You can now find chainweaver in the applications menu. With this icon Help See the Chainweaver Troubleshoot page if you encountered issues installing the .deb","title":".deb for Linux"},{"location":"Chainweaver-Support/#ova-for-windows-linux-and-mac","text":"First, make sure that you have VirtualBox installed as this virtualisation app is required to run the OVA. Download the .ova from https://www.kadena.io/chainweaver . Navigate to your downloads folder and double click the .ova. You should get an import virtual appliance dialog which you can safely accept the defaults and press import. Once this is imported, you can run the virtual machine by double clicking \"Kadena Chainweaver VM\" in the list of VMs. This will start the virtual machine and it will boot like a normal computer. Eventually you should see chainweaver like this. Help See the Chainweaver Troubleshoot page if you encountered issues installing the .ova","title":".ova for Windows, Linux, and Mac"},{"location":"Chainweaver-Support/#create-a-new-wallet-or-restore-an-existing-wallet","text":"Create a new wallet There are three main steps to create a new wallet; (1) set password, (2) record recovery phrase, (3) verify recovery phrase \u200bSet password: Create a strong, secret, and unique password. See the Basic Safety Tips section for suggestions on password generation. Record recovery phrase: Mouse over each of the 12 words to view and record your recovery phrase. See the Basic Safety Tips section for suggestions on securing your recovery phrase. Verify recovery phrase: Enter each word in the correct order to verify that you have correctly recorded your recovery phrase. Restore existing wallet There are three main steps to restore an existing wallet; (1) enter recovery phrase, (2) set new password, (3) re-generate keys Enter recovery phrase: Follow the guidance to enter your 12-word recovery phrase. Set new password: Input a new password for your existing wallet. Re-generate keys: From the Keys section, select the Generate Key button to restore keys. These keys are deterministically generated meaning that the same keys will always appear in the same order by using the recovery phrase as a master seed. Repeat selecting the Generate Key button until all necessary keys are restored.","title":"Create a new wallet or restore an existing wallet"},{"location":"Chainweaver-Support/#interface-overview","text":"\u200bChainweaver's interface consists of three main elements; (1) Network Display, (2) Sections Menu, (3) Main Viewer Network Display (top bar) This display bar persists across all screen views within Chainweaver so that you will always know the network with which you are interacting Sections Menu (left bar) Use this menu to go to different Sections Keys: Display of all public keys generated within the wallet Accounts: Display of all added accounts and their status across chains. Deposit and withdraw KDA. Contracts: Write, deploy and interact with smart contracts Resources: Reference helpful support materials Settings: Configure wallet and network settings Logout: Log out of the desktop application Main Viewer (center screen) This is where you interact with the section you have chosen from the Sections Menu.","title":"Interface overview"},{"location":"Chainweaver-Support/#update-to-the-latest-version-of-chainweaver","text":"Upgrading Chainweaver is an essential part of keeping your crypto assets safe and enjoying new features for interacting with the Kadena blockchain ecosystem. The latest version of Chainweaver will always be available for download at https://www.kadena.io/chainweaver . \u200bNote: Ensure you have a secure connection before downloading any applications. Most issues can be resolved simply by updating to the latest version of Chainweaver.","title":"Update to the latest version of Chainweaver"},{"location":"Chainweaver-Support/#networks","text":"","title":"Networks"},{"location":"Chainweaver-Support/#different-networks-in-chainweaver","text":"Chainweaver allows you to interact with different networks, including the main network (\u201cMainnet\u201d) and a test network (\u201cTestnet\u201d) Mainnet is the primary live blockchain network where assets of value can be transferred and smart contract services can be called. Testnet is a network with which you can safely test various blockchain interactions without the risk of losing valuable assets. Both Mainnet and Testnet are fully operational, real blockchains. It is only Testnet, however, where you can acquire KDA coins for free from a coin faucet . Naturally, account balances cannot move between networks.","title":"Different networks in Chainweaver"},{"location":"Chainweaver-Support/#change-networks","text":"You can change the network with which you are actively interacting by selecting the drop-down arrows beside the displayed network in the Network Display top bar. Simply select the desired network from the available list and confirm the selection. The keys displayed in the wallet will persist across networks, while the accounts list will refresh to display those that you have added on the chosen network.","title":"Change networks"},{"location":"Chainweaver-Support/#create-a-custom-network","text":"You can add your own custom network by selecting the appropriate option from the Settings section. \u200b To create a new network, you will have to define a network name then enter the addresses for the nodes to which you would like the network to connect. Node status is displayed with a traffic light style indicator. Note Custom networks are defined locally and will only be visible within the application that created it. It is recommended that a network connect to at least 3 nodes.","title":"Create a custom network"},{"location":"Chainweaver-Support/#keys-and-accounts","text":"","title":"Keys and Accounts"},{"location":"Chainweaver-Support/#understanding-keys-vs-accounts","text":"In brief, Keys sign transactions and Accounts may be governed by one or multiple keys. With most blockchains, accounts are modeled as simply public/private keypairs. This one-to-one model keeps things simple, but runs into problems when account control requires a many-to-many model (such as with jointly owned or majority ruled accounts). Kadena natively supports multiple keys governing the same account, and thus the distinction between Keys and Accounts becomes important. Every Account is governed by a keyset which must be defined when creating any Account. Keysets are composed of two parts; (1) a set of keys and (2) a predicate Set of keys: a list of public keys that are associated to the account Predicate: a governance function that determines which keys are allowed to make choices for the account when it comes to transactions (e.g. do all keys need to be present? only one? two? etc.) Summarily, keysets look like the following as JSON data: { \"keys\": [\"pubkey1\", \"pubkey2\",...,\"pubkeyN\"], \"pred\": \"some governance function\" } When signing a transaction, the list of private keys supplied as signing key pairs will be checked against the keyset and predicate to ensure that not only are all keys that need to be present accounted for but that the predicate is satisfied.","title":"Understanding Keys vs. Accounts"},{"location":"Chainweaver-Support/#generate-a-key","text":"The first step towards transacting on the Kadena blockchain is to generate a key pair. Begin by selecting the \u201c+ Generate Key\u201d button, then continue to Accounts.","title":"Generate a Key"},{"location":"Chainweaver-Support/#add-an-account","text":"Accounts are effectively equivalent to your identity on the blockchain. When you add an Account in Chainweaver, you will be able to view information about it such as its keyset info and balance on each of the known chains. Select \u201c+ Add Account\u201d to view existing accounts or create a new account. Optionally, you can add personal notes beside any account. This field is never seen by the blockchain, and only serves as a personal reference to organize a user\u2019s wallet.","title":"Add an Account"},{"location":"Chainweaver-Support/#create-an-account","text":"Begin by entering the desired account\u2019s name within the \u201c+ Add Account\u201d dialog to see whether it already exists. If the account is available, you will see a \u201c+ Create Account\u201d button in the corresponding Chain ID row as well as an account balance of \u201cDoes not exist.\u201d Select the \u201c+ Create Account\u201d button beside the desired account\u2019s Chain ID row to open the dialog. Fill in the required fields to define the account\u2019s keyset. Since adding any record to the blockchain necessitates a transaction, you too must submit a transaction in order to permanently claim the account\u2019s name on the blockchain. As with all transactions, a nominal amount of gas must be paid in order to execute the transaction. If some account in your wallet has funds on the same chain as the desired new account, you may select \u201cI am the Gas Payer\u201d to complete the transaction flow by paying for the gas yourself. If you do not have any funds, you may select \u201cI am not the Gas Payer\u201d to view and copy the Tx Builder which contains all of the account info you have just configured. Share this Tx Builder data with someone else to pay the gas for the transaction to create the account for you. Remember that the Kadena public blockchain network is comprised of many chains braided together. In effect, each chain is a standalone blockchain, therefore you will have to create your desired account on each chain for which you want it to exist. Naturally, the same account name will have a different account balance on each chain, and may also have different owners or a different keyset. Always be sure to take note of the chain on which you are transacting.","title":"Create an account"},{"location":"Chainweaver-Support/#remove-an-account","text":"To remove an account from view, begin by selecting the Details button in the desired account row to reveal Account Details. Near the bottom of the Account Details dialog, select \u201cRemove Account\u201d Read the warning message and confirm your selection by selecting \u201cRemove Account\u201d","title":"Remove an account"},{"location":"Chainweaver-Support/#transactions","text":"Signing transactions in Chainweaver is different from most crypto wallets in two distinct ways; the concepts of (1) Tx Builder and (2) granting capabilities each provide the user with greater transparency and control. Tx Builder This is a JSON blob including the necessary information to build a transaction. For simple transfers it might include just an account name and chain ID, like this: { \"account\": \"alice\", \"chain\": \"5\" } For account creation it might also include a keyset, like this: { \"account\": \"alice\", \"chain\": \"5\", \"keyset\": { \"keys\": [\"368698bf0354b0c04884a185a7eefd20500562cad23bf9c25eee53ddc0ba7d7b\"], \"pred\": \"keys-all\" } } While users will never need to compose this code themselves, it is important to become familiar with reading it to understand how some blockchain operations work. Granting capabilities Performing transfers necessitates a call to the blockchain\u2019s coin contract. This contract describes the rules for transferring coins and one such rule requires that the Sender account grant the capability to transfer coins in order for the transaction to be submitted. The act of granting capabilities is akin to authorizing or signing a transaction. In more advanced scenarios some contracts require multiple capabilities to be granted. This concept gives the user greater control and transparency to what they are signing.","title":"Transactions"},{"location":"Chainweaver-Support/#receive-kadena-kda","text":"To receive KDA, you must first share your Tx Builder with another person from whom you wish to receive a payment. To access your Tx Builder, navigate to the Accounts section and select the \u201cReceive\u201d button beside the desired account\u2019s chain ID row. This will open the Receive dialog from which you can copy the Tx Builder and share with others. \u200b One additional feature for experienced users is the ability to transfer KDA from compatible accounts that were not generated within Chainweaver. You can access this feature from the Receive dialog by expanding the menu-field under the sub-section \u201cOption 2: Transfer from non-Chainweaver Account.\u201d Fill in the required fields to Submit Transfer.","title":"Receive Kadena (KDA)"},{"location":"Chainweaver-Support/#send-kadena-kda","text":"Since the Kadena public blockchain network braids multiple chains together, you can transfer KDA in two ways; (1) transfer between the same chain and (2) transfer between different chains. Transfer between the same chain Navigate to the Account section and select the \u201cSend\u201d button beside the desired account\u2019s chain ID row from which you would like to transfer funds. This will open the Send dialog which is divided into two parts; Configuration and Sign: Configure the transaction Recipient: Enter the recipient\u2019s Tx Builder and amount to send Transaction Settings: Choose the transaction speed and expiration Sign the transaction Gas Payer: Select an account to sign and pay the transaction gas Once all required fields have been entered, select the \u201cPreview\u201d button. Here you will be able to review and confirm details before submitting the transaction. Transfer between different chains This process has one distinct difference from transfers on the same chain. This time when you sign the transaction, you must select two Gas Payers: Gas payer on the originating chain to initiate the transfer Gas payer on the destination chain to redeem the transfer It may seem unusual to have to pay for gas twice, but consider what is happening with a cross-chain transfer. In this scenario you are moving coins between two different blockchains, each with their own ledger. Therefore gas on one chain cannot pay for executing operations on a different chain.","title":"Send Kadena (KDA)"},{"location":"Chainweaver-Support/#adjust-gas-price-and-gas-limit","text":"Before you submit any transaction or deploy any smart contract, you will have the opportunity to configure a few settings. You can adjust both the Gas Price and the Gas Limit of your transaction. As either of these settings are adjusted, you can see how these changes might affect Transaction Speed and Max Transaction Fee. Note Chainweaver does not charge a fee to send or receive a transaction. All transaction fees go directly to miners as compensation for providing the compute power required to execute the operation.","title":"Adjust gas price and gas limit"},{"location":"Chainweaver-Support/#track-your-transaction","text":"Once a transaction has been submitted, Chainweaver will display the Transaction Status as it moves through progress states. The average block time in the Kadena network is 30 seconds. So depending on the Transaction Speed you assigned, it may take several blocks before your transaction is successfully mined. Transaction success: When the transaction has been successfully mined in a block, a Transaction Result will display. Transaction failure: If the transaction fails at any progress state then a red \u201cX\u201d will appear beside the failing state.","title":"Track your transaction"},{"location":"Chainweaver-Support/#smart-contracts","text":"The ability to write, deploy, and call smart contracts from within Chainweaver makes it one of the most comprehensive workbench tools for blockchain. Navigate to the Contracts section and utilize the integrated development environment (IDE) for developing and testing Pact smart contracts. Pact is the safe and simple smart contract language used for interacting with the Kadena blockchain. Visit https://pactlang.org/ for developer tutorials covering key concepts and real projects you can deploy yourself.","title":"Smart Contracts"},{"location":"Chainweaver-Support/#deploy-your-own-smart-contract","text":"Once you have written the code for your new smart contract in the code editor, check the ENV tab of the tool panel on the right side for any error messages that might be displayed. Once you are satisfied with your code, you can either select \u201cLoad into REPL\u201d or \u201cDeploy.\u201d \u201cLoad into REPL\u201d will execute the editor text within the local REPL environment so that you can test and interact with the contract \u201cDeploy\u201d will begin the process of configuring the smart contract for execution on the blockchain Should you select \u201cDeploy,\u201d you will next be prompted to designate the transaction destination and settings. On the \u201cSign\u201d tab you must enter any new capabilities as defined in your contract code, then select the account to authorize each capability. Once all required fields have been entered, select the \u201cPreview\u201d button. Here you will be able to review and confirm details before submitting the transaction.","title":"Deploy your own smart contract"},{"location":"Chainweaver-Support/#call-an-existing-smart-contract","text":"Once a contract has been deployed, it will show up in the \u201cDeployed Contracts\u201d table under the \u201cModule Explorer\u201d tab of the Contracts tool panel. Contracts can be filtered by chain or through search. Select \u201cView\u201d beside your chosen contract to reveal all of the available functions to call. Select \u201cCall\u201d beside your chosen function to open a three-part dialog: Parameters: enter the required parameters Configuration: choose the transaction settings Sign: grant the required capabilities Preview the transaction, then select \u201cCreate Transaction\u201d to execute the operation.","title":"Call an existing smart contract"},{"location":"Chainweaver-Support/#interact-with-dapps","text":"As a user, interacting with dapps is simple. Chainweaver takes advantage of a novel wallet signing API which facilitates communication between dapps and wallets. First ensure your Chainweaver desktop application is open. When you\u2019re ready to start some transaction with a dapp, initiate the request by submitting the required information (e.g. account name) to the dapp. Once a call has been made, by pressing a button on the dapp interface or through some other means, the signing API will hit Chainweaver. When Chainweaver receives an API call, a new dialog will appear within Chainweaver displaying input data from the dapp. Review the transaction details and complete the flow as you would for any other transaction; configure settings, grant capabilities, preview and create.","title":"Interact with Dapps"},{"location":"Chainweaver-Support/#security-and-access","text":"","title":"Security and Access"},{"location":"Chainweaver-Support/#key-pair-generation","text":"Kadena uses Ed25519 public/private key pair signatures. Chainweaver can be used to easily generate compatible key pairs. Alternatively, you can generate key pairs yourself by following any kind of Ed25519 key generation method such as this one contributed to our community GitHub. Learn more about Ed25519 here ).","title":"Key pair generation"},{"location":"Chainweaver-Support/#basic-safety-tips","text":"As with any valuable asset, it is important to establish a secure and reliable method for controlling who has access to it. While Chainweaver is designed to satisfy strict security standards, you are ultimately responsible for maintaining the security of your wallet\u2019s access credentials\u2014the password and recovery phrase. Passwords : Consider using a password manager to generate a strong password with randomness of character types. If you decide to create a password yourself, make sure it is not the same or similar to any other password you have ever used. Recovery phrases : This 12-word phrase is the master seed that generates all your wallet\u2019s public/private key pairs. With this phrase, anyone can control your wallet, even from another device. Consider securing more than one copy to prevent a single point of failure from events like fires, loss, etc. Kadena does not control any of your personal/private data on our servers. Never share passwords or recovery phrases with anyone, including the Kadena team. We will never ask for you to provide this. If someone claims that we do, insist on not sharing.","title":"Basic safety tips"},{"location":"Chainweaver-Support/#who-can-access-your-account","text":"Anyone with your wallet's password, private keys or recovery phrase can access your account. Passwords, private keys, and recovery phrases are in the users\u2019 hands and are the users\u2019 responsibility. Chainweaver is simply an interface that allows you to more easily interact with your accounts and the Kadena blockchain.","title":"Who can access your account"},{"location":"Chainweaver-Support/#lost-password-andor-recovery-phrase","text":"Lost password If you lose your password, you can reset it by using your 12-word recovery phrase to restore the wallet with a new password. Lost both password and recovery phrase If you lose both your password and recovery phrase, you will permanently lose access to any accounts and their funds forever. Kadena does not manage accounts with information such as passwords, private keys, or recovery phrases. We only have access to the information that is publicly available on the blockchain. We do not have servers and we do not hold your assets.","title":"Lost password and/or recovery phrase"},{"location":"Chainweaver-Support/#log-out","text":"The \u201cLog out\u201d button in the lower-left of the Section menu will lock your wallet. A locked wallet cannot sign transactions or receive signing API calls.","title":"Log out"},{"location":"Chainweaver-Support/#codebase","text":"To find out about the latest improvements to Chainweaver, view all activity available at the open-source repository on GitHub here .","title":"Codebase"},{"location":"Chainweaver-Support/#contact","text":"","title":"Contact"},{"location":"Chainweaver-Support/#authorized-communications","text":"Kadena staff will never ask for sensitive information, including passwords, recovery phrases or private keys. Beware of fake accounts and scam attempts. Chainweaver will only communicate through verified channels.","title":"Authorized Communications"},{"location":"Chainweaver-Support/#chat","text":"Join our Discord server here and chat live with Kadena developers and the community on the #chainweaver channel","title":"Chat"},{"location":"FAQs/","text":"Kadena FAQ \u00b6 What consensus mechanism does Kadena use? \u00b6 Proof of Work What hashing algorithm does Kadena use? \u00b6 Blake2s_256 What is the target block time for Kadena? \u00b6 30 seconds What are the block rewards? \u00b6 Block rewards are readjusted against a set schedule every six months, with roughly half of the remaining minable coins issued as block rewards every 20 years. See the complete miner block reward schedule here . What is KDA? \u00b6 See the What is KDA page for information regarding Kadena\u2019s native cryptocurrency, KDA. Does Kadena have a block explorer? \u00b6 View the block explorer here which visualizes the mining, propagation and braiding of blocks across multiple Kadena chains in real time Where can I find Kadena\u2019s whitepapers? \u00b6 Kadena has published whitepapers for the public protocol Chainweb, the private blockchain Kuro, and the smart contract language Pact which can be found here Is Kadena open source? \u00b6 Yes, the open-source repository for the Kadena public blockchain is here Why does Kadena\u2019s public blockchain use proof of work? \u00b6 Kadena uses proof of work for a few key reasons: Evidence: PoW is the only \u201cbattle-tested\u201d consensus protocol primitive. Economic incentive alignment: PoW creates an economic incentive for the majority of the hashpower to validate and honestly support the entire network. It is an open research question if a non-PoW approach can reasonably achieve the same. Regulation: In the eyes of certain financial regulators, proof of work miners are not considered money transmitters, making a probabilistic PoW mining system safer from a US regulatory perspective than a system with more \u201cfinality\u201d like PoS. How does Kadena scale? \u00b6 Kadena\u2019s public blockchain scales by providing a mechanism to asynchronously produce many blocks on different peer chains all at the same height, with each block requiring a fraction of the hash power of the total network. This configuration drastically increases the number of transactions per second over the total network. How does Kadena deal with congestion? \u00b6 Transaction costs will rise as the number of transactions rise on one chain. You can set up an account on a less congested chain, where transaction costs are cheaper, and move your tokens through a simple burn-receipt using on-chain SPV. Miners have economic incentive to cooperate with reconfiguring the network to a larger size when the entire network starts to become congested. What does it mean to \u201cbraid multiple chains\u201d? \u00b6 Braiding chains together was first proposed for security purposes. In effect, chains are \u201cbraided\u201d as each chain\u2019s newly mined block incorporates the Merkle roots of its peer chains. By having multiple mined blocks at the same height each referencing each other\u2019s past, the protocol decreases the duration of time where an attacker could get \u201clucky\u201d against an honest network. Think of an attacker needing to flip 6 coins and get all heads (mine 6 blocks) vs. needing to flip 12 coins and get all heads (mine 6 blocks from two related chains). The latter is harder. This same intuition applies to Kadena\u2019s multi-chain configuration. How are tokens moved between different Kadena chains? \u00b6 Tokens are moved across chains using a Simple Payment Verification (SPV) smart contract. How do I run a node? \u00b6 Official information for running a node is maintained at this GitHub repository , and supplementary community resources collected within this site\u2019s Public chain interaction page. How do I become a miner? \u00b6 Official information for mining KDA is maintained at this GitHub repository , and supplementary community resources collected within this site\u2019s Public chain interaction page.","title":"Kadena FAQ"},{"location":"FAQs/#kadena-faq","text":"","title":"Kadena FAQ"},{"location":"FAQs/#what-consensus-mechanism-does-kadena-use","text":"Proof of Work","title":"What consensus mechanism does Kadena use?"},{"location":"FAQs/#what-hashing-algorithm-does-kadena-use","text":"Blake2s_256","title":"What hashing algorithm does Kadena use?"},{"location":"FAQs/#what-is-the-target-block-time-for-kadena","text":"30 seconds","title":"What is the target block time for Kadena?"},{"location":"FAQs/#what-are-the-block-rewards","text":"Block rewards are readjusted against a set schedule every six months, with roughly half of the remaining minable coins issued as block rewards every 20 years. See the complete miner block reward schedule here .","title":"What are the block rewards?"},{"location":"FAQs/#what-is-kda","text":"See the What is KDA page for information regarding Kadena\u2019s native cryptocurrency, KDA.","title":"What is KDA?"},{"location":"FAQs/#does-kadena-have-a-block-explorer","text":"View the block explorer here which visualizes the mining, propagation and braiding of blocks across multiple Kadena chains in real time","title":"Does Kadena have a block explorer?"},{"location":"FAQs/#where-can-i-find-kadenas-whitepapers","text":"Kadena has published whitepapers for the public protocol Chainweb, the private blockchain Kuro, and the smart contract language Pact which can be found here","title":"Where can I find Kadena\u2019s whitepapers?"},{"location":"FAQs/#is-kadena-open-source","text":"Yes, the open-source repository for the Kadena public blockchain is here","title":"Is Kadena open source?"},{"location":"FAQs/#why-does-kadenas-public-blockchain-use-proof-of-work","text":"Kadena uses proof of work for a few key reasons: Evidence: PoW is the only \u201cbattle-tested\u201d consensus protocol primitive. Economic incentive alignment: PoW creates an economic incentive for the majority of the hashpower to validate and honestly support the entire network. It is an open research question if a non-PoW approach can reasonably achieve the same. Regulation: In the eyes of certain financial regulators, proof of work miners are not considered money transmitters, making a probabilistic PoW mining system safer from a US regulatory perspective than a system with more \u201cfinality\u201d like PoS.","title":"Why does Kadena\u2019s public blockchain use proof of work?"},{"location":"FAQs/#how-does-kadena-scale","text":"Kadena\u2019s public blockchain scales by providing a mechanism to asynchronously produce many blocks on different peer chains all at the same height, with each block requiring a fraction of the hash power of the total network. This configuration drastically increases the number of transactions per second over the total network.","title":"How does Kadena scale?"},{"location":"FAQs/#how-does-kadena-deal-with-congestion","text":"Transaction costs will rise as the number of transactions rise on one chain. You can set up an account on a less congested chain, where transaction costs are cheaper, and move your tokens through a simple burn-receipt using on-chain SPV. Miners have economic incentive to cooperate with reconfiguring the network to a larger size when the entire network starts to become congested.","title":"How does Kadena deal with congestion?"},{"location":"FAQs/#what-does-it-mean-to-braid-multiple-chains","text":"Braiding chains together was first proposed for security purposes. In effect, chains are \u201cbraided\u201d as each chain\u2019s newly mined block incorporates the Merkle roots of its peer chains. By having multiple mined blocks at the same height each referencing each other\u2019s past, the protocol decreases the duration of time where an attacker could get \u201clucky\u201d against an honest network. Think of an attacker needing to flip 6 coins and get all heads (mine 6 blocks) vs. needing to flip 12 coins and get all heads (mine 6 blocks from two related chains). The latter is harder. This same intuition applies to Kadena\u2019s multi-chain configuration.","title":"What does it mean to \u201cbraid multiple chains\u201d?"},{"location":"FAQs/#how-are-tokens-moved-between-different-kadena-chains","text":"Tokens are moved across chains using a Simple Payment Verification (SPV) smart contract.","title":"How are tokens moved between different Kadena chains?"},{"location":"FAQs/#how-do-i-run-a-node","text":"Official information for running a node is maintained at this GitHub repository , and supplementary community resources collected within this site\u2019s Public chain interaction page.","title":"How do I run a node?"},{"location":"FAQs/#how-do-i-become-a-miner","text":"Official information for mining KDA is maintained at this GitHub repository , and supplementary community resources collected within this site\u2019s Public chain interaction page.","title":"How do I become a miner?"},{"location":"Glossary/","text":"Glossary \u00b6 A | B | C | D | E | F | G | H | I | J | K | L | M \u00b6 N | O | P | Q | R | S | T | U | V | W | X | Y | Z \u00b6 A \u00b6 Account B \u00b6 C \u00b6 Chain Chainweaver D \u00b6 E \u00b6 F \u00b6 G \u00b6 H \u00b6 I \u00b6 J \u00b6 K \u00b6 Keys Keyset L \u00b6 M \u00b6 N \u00b6 O \u00b6 P \u00b6 Q \u00b6 R \u00b6 S \u00b6 T \u00b6 U \u00b6 V \u00b6 Vanity Account W \u00b6 Wallet X \u00b6 Y \u00b6 Z \u00b6","title":"Glossary"},{"location":"Glossary/#glossary","text":"","title":"Glossary"},{"location":"Glossary/#a-b-c-d-e-f-g-h-i-j-k-l-m","text":"","title":"A | B | C | D | E | F | G | H | I | J | K | L | M"},{"location":"Glossary/#n-o-p-q-r-s-t-u-v-w-x-y-z","text":"","title":"N | O | P | Q | R | S | T | U | V | W | X | Y | Z"},{"location":"Glossary/#a","text":"Account","title":"A"},{"location":"Glossary/#b","text":"","title":"B"},{"location":"Glossary/#c","text":"Chain Chainweaver","title":"C"},{"location":"Glossary/#d","text":"","title":"D"},{"location":"Glossary/#e","text":"","title":"E"},{"location":"Glossary/#f","text":"","title":"F"},{"location":"Glossary/#g","text":"","title":"G"},{"location":"Glossary/#h","text":"","title":"H"},{"location":"Glossary/#i","text":"","title":"I"},{"location":"Glossary/#j","text":"","title":"J"},{"location":"Glossary/#k","text":"Keys Keyset","title":"K"},{"location":"Glossary/#l","text":"","title":"L"},{"location":"Glossary/#m","text":"","title":"M"},{"location":"Glossary/#n","text":"","title":"N"},{"location":"Glossary/#o","text":"","title":"O"},{"location":"Glossary/#p","text":"","title":"P"},{"location":"Glossary/#q","text":"","title":"Q"},{"location":"Glossary/#r","text":"","title":"R"},{"location":"Glossary/#s","text":"","title":"S"},{"location":"Glossary/#t","text":"","title":"T"},{"location":"Glossary/#u","text":"","title":"U"},{"location":"Glossary/#v","text":"Vanity Account","title":"V"},{"location":"Glossary/#w","text":"Wallet","title":"W"},{"location":"Glossary/#x","text":"","title":"X"},{"location":"Glossary/#y","text":"","title":"Y"},{"location":"Glossary/#z","text":"","title":"Z"},{"location":"Private-Chain-Docs/","text":"Run a Cluster \u00b6 AWS Kuro on AWS : This takes you to the official listing of Kadena's Private Blockchain on AWS. This is the community edition version of the software, which limits the cluster size to a maximum of 4 nodes. AWS Setup Instructions : Our documentation for using Ansible to setup the Kuro cluster on AWS. Azure Kuro on Azure : This takes you to the official listing of Kadena's Private Blockchain on Azure. This is the community edition version of the software, which limits the cluster size to a maximum of 4 nodes. Azure Setup Instructions : Our documentation for using Ansible to setup the Kuro cluster on AWS. For a version without any of restrictions, please contact us at info@kadena.io . General Documentation \u00b6 Kuro README : Provides detailed information on cluster configuration, supported interactions, and general considerations. Kadena Private Blockchain Whitepaper","title":"Private Chain Deployment"},{"location":"Private-Chain-Docs/#run-a-cluster","text":"AWS Kuro on AWS : This takes you to the official listing of Kadena's Private Blockchain on AWS. This is the community edition version of the software, which limits the cluster size to a maximum of 4 nodes. AWS Setup Instructions : Our documentation for using Ansible to setup the Kuro cluster on AWS. Azure Kuro on Azure : This takes you to the official listing of Kadena's Private Blockchain on Azure. This is the community edition version of the software, which limits the cluster size to a maximum of 4 nodes. Azure Setup Instructions : Our documentation for using Ansible to setup the Kuro cluster on AWS. For a version without any of restrictions, please contact us at info@kadena.io .","title":"Run a Cluster"},{"location":"Private-Chain-Docs/#general-documentation","text":"Kuro README : Provides detailed information on cluster configuration, supported interactions, and general considerations. Kadena Private Blockchain Whitepaper","title":"General Documentation"},{"location":"Public-Chain-Docs/","text":"Public Chain Interaction \u00b6 Get a Wallet, Create Keys, & Transfer KDA \u00b6 Resources Chainweaver (wallet): Official cryptocurrency and smart contract wallet for the Kadena Public Blockchain ZelCore (wallet): Officially supported third-party multi-asset wallet Bag of Holding (wallet): Terminal Wallet (Community contribution) Secure Key Generation : Package for generating ED25519 key pairs with user supplied entropy (Community contribution) Simple Key Generation : Generate a key pair with one click (Community contribution) Simple Token Transfer : Transfer KDA to new or existing accounts (Community contribution) Simple Balance Checker : View the current balance of any account Transaction Tester : GUI for assembling Pact code and previewing transactions Finish Cross-chain Transfer : Enter a Request Key and complete a cross-chain transfer on the recipient chain (Community contribution) Guides Chainweaver User Guide : Official support resource for using Chainweaver \" How to generate a KDA address \": Article by Thanos (Community contribution) Beginner's Guide to Accounts & Keysets : Brief description of keys, keysets, accounts and how they work in Kadena Getting Started with Transfers : Brief description of transfer types and tools View Network Activity \u00b6 Resources Block Explorer : Analytics tool which visualizes the mining, propagation and braiding of blocks across multiple Kadena chains in real time Active Node List : List of known node addresses (Community contribution) Write Smart Contracts \u00b6 Resources Installing Pact : Official Kadena README Pact Read the Docs : Complete language reference for the Pact smart contract language Pact Web REPL : Web-based environment for writing, testing, and deploying Pact smart contracts to testnet Guides Pact Developer Tutorials : Learn Pact's fundamental concepts through structured lessons and sample projects Pact Local Queries : Describes how to use local API endpoints to dry-run smart contracts using Mainnet data (Community contribution) Safe Rotate and Drain (example): Describes how to rotate an account\u2019s key then transfer the account\u2019s balance to another account (Community contribution) Safe Transfer (example): Describes how to perform a safe transfer by requiring the recipient to also sign and return some KDA all within a single transaction (Community contribution) Deploy a module to Testnet using Command Line (example): (Community contribution) Interact with dApps \u00b6 Resources Testnet Portal : Create an account, get free coins, and play games Testnet Coin Faucet : Get free coins to practice executing transfers and smart contracts Wallet Signing API : Documentation of the signing API which facilitates communication between dApps and wallets Run a Node \u00b6 Resources chainweb-node : The complete open-source repository for Chainweb Chainweb binaries : The latest binary release to run your own node Bootstrap nodes : A list of bootstrap nodes for Mainnet and Testnet Hardware specs required to run a node : Kadena official README Troubleshooting : Common issues related to running a node Guides Installing Chainweb (Mac and Linux): Kadena official README Configuring and running a node : Kadena official README Running a node, alternate 1 : Kadena node installation instructions (Community contribution) Running a node, alternate 2 : Kadena node installation instructions (Community contribution) Monitoring the health of a node : Kadena official README Interact with Nodes \u00b6 Resources REST API Examples with curl : View commands for querying a node to get database information such as block header and cut height Index and Analyze the Blockchain \u00b6 Resources chainweb-data : Chainweb data indexer for storing blockchain data in a Postgresql database Start Mining \u00b6 Resources Chainweb-miner : Kadena official README for mining to the Kadena Public Blockchain BigOlChungus (Kadena miner): Open Source Linux AMD/Nvidia OpenCL miner; one instance per card (Community contribution) KDA-Miner (Kadena miner): Open Source Linux AMD/Nvidia OpenCL miner, 10% fee (Community contribution) NoncerPro-Kadena (Kadena miner): Closed Source Linux/Windows Nvidia Cuda miner, 2% fee (Community contribution) SRBMiner (Kadena miner): Closed Source Linux/Windows AMD miner, 0.85% fee (Community contribution) Troubleshooting : Common issues related to mining KDA Guides How to mine with a CPU : How to mine with a GPU : \" How to solo mine Kadena \": Article on how to solo mine Kadena, by Thanos (Community contribution) F2Pool Mining Guide : Instruction on mining with f2pool (Community contribution) Icemining Mining Guide : Instruction on mining with icemining (Community contribution)","title":"Public Chain Interaction"},{"location":"Public-Chain-Docs/#public-chain-interaction","text":"","title":"Public Chain Interaction"},{"location":"Public-Chain-Docs/#get-a-wallet-create-keys-transfer-kda","text":"Resources Chainweaver (wallet): Official cryptocurrency and smart contract wallet for the Kadena Public Blockchain ZelCore (wallet): Officially supported third-party multi-asset wallet Bag of Holding (wallet): Terminal Wallet (Community contribution) Secure Key Generation : Package for generating ED25519 key pairs with user supplied entropy (Community contribution) Simple Key Generation : Generate a key pair with one click (Community contribution) Simple Token Transfer : Transfer KDA to new or existing accounts (Community contribution) Simple Balance Checker : View the current balance of any account Transaction Tester : GUI for assembling Pact code and previewing transactions Finish Cross-chain Transfer : Enter a Request Key and complete a cross-chain transfer on the recipient chain (Community contribution) Guides Chainweaver User Guide : Official support resource for using Chainweaver \" How to generate a KDA address \": Article by Thanos (Community contribution) Beginner's Guide to Accounts & Keysets : Brief description of keys, keysets, accounts and how they work in Kadena Getting Started with Transfers : Brief description of transfer types and tools","title":"Get a Wallet, Create Keys, &amp; Transfer KDA"},{"location":"Public-Chain-Docs/#view-network-activity","text":"Resources Block Explorer : Analytics tool which visualizes the mining, propagation and braiding of blocks across multiple Kadena chains in real time Active Node List : List of known node addresses (Community contribution)","title":"View Network Activity"},{"location":"Public-Chain-Docs/#write-smart-contracts","text":"Resources Installing Pact : Official Kadena README Pact Read the Docs : Complete language reference for the Pact smart contract language Pact Web REPL : Web-based environment for writing, testing, and deploying Pact smart contracts to testnet Guides Pact Developer Tutorials : Learn Pact's fundamental concepts through structured lessons and sample projects Pact Local Queries : Describes how to use local API endpoints to dry-run smart contracts using Mainnet data (Community contribution) Safe Rotate and Drain (example): Describes how to rotate an account\u2019s key then transfer the account\u2019s balance to another account (Community contribution) Safe Transfer (example): Describes how to perform a safe transfer by requiring the recipient to also sign and return some KDA all within a single transaction (Community contribution) Deploy a module to Testnet using Command Line (example): (Community contribution)","title":"Write Smart Contracts"},{"location":"Public-Chain-Docs/#interact-with-dapps","text":"Resources Testnet Portal : Create an account, get free coins, and play games Testnet Coin Faucet : Get free coins to practice executing transfers and smart contracts Wallet Signing API : Documentation of the signing API which facilitates communication between dApps and wallets","title":"Interact with dApps"},{"location":"Public-Chain-Docs/#run-a-node","text":"Resources chainweb-node : The complete open-source repository for Chainweb Chainweb binaries : The latest binary release to run your own node Bootstrap nodes : A list of bootstrap nodes for Mainnet and Testnet Hardware specs required to run a node : Kadena official README Troubleshooting : Common issues related to running a node Guides Installing Chainweb (Mac and Linux): Kadena official README Configuring and running a node : Kadena official README Running a node, alternate 1 : Kadena node installation instructions (Community contribution) Running a node, alternate 2 : Kadena node installation instructions (Community contribution) Monitoring the health of a node : Kadena official README","title":"Run a Node"},{"location":"Public-Chain-Docs/#interact-with-nodes","text":"Resources REST API Examples with curl : View commands for querying a node to get database information such as block header and cut height","title":"Interact with Nodes"},{"location":"Public-Chain-Docs/#index-and-analyze-the-blockchain","text":"Resources chainweb-data : Chainweb data indexer for storing blockchain data in a Postgresql database","title":"Index and Analyze the Blockchain"},{"location":"Public-Chain-Docs/#start-mining","text":"Resources Chainweb-miner : Kadena official README for mining to the Kadena Public Blockchain BigOlChungus (Kadena miner): Open Source Linux AMD/Nvidia OpenCL miner; one instance per card (Community contribution) KDA-Miner (Kadena miner): Open Source Linux AMD/Nvidia OpenCL miner, 10% fee (Community contribution) NoncerPro-Kadena (Kadena miner): Closed Source Linux/Windows Nvidia Cuda miner, 2% fee (Community contribution) SRBMiner (Kadena miner): Closed Source Linux/Windows AMD miner, 0.85% fee (Community contribution) Troubleshooting : Common issues related to mining KDA Guides How to mine with a CPU : How to mine with a GPU : \" How to solo mine Kadena \": Article on how to solo mine Kadena, by Thanos (Community contribution) F2Pool Mining Guide : Instruction on mining with f2pool (Community contribution) Icemining Mining Guide : Instruction on mining with icemining (Community contribution)","title":"Start Mining"},{"location":"pact-local-queries/","text":"Pact Local API Queries \u00b6 Chainweb supports the use of the Pact smart contract language, including the local API endpoints defined in the documentation . Using the local API endpoints on any Chainweb node, you can dry-run Pact smart contracts using actual data in the coin contract tables. This is perfect for checking the viability of your smart contracts, as well as to check account data without necessarily having to spend tokens! Setup \u00b6 Follow the instructions at pactlang.org to get started with Pact learning the basics. For a more straightforward and technical introduction, just readthedocs . In particular, for any script going on Chainweb, you'll need to understand the API request format . Creating A Local API Request \u00b6 A local query does not need to make use of any metadata, env data, or signers, so a minimalist API request format is relatively simple: (code|codeFile) : <code goes here> keyPairs : [] For example, if one wanted to check their balance, the following request format would be sufficient: code : (coin.get-balance \"<account name>\") keyPairs : [] Once one has such a yaml, issue pact -l -a <my-script-name>.yaml . The following output should look something like this: {\"hash\":\"<some hash>\",\"sigs\":[],\"cmd\":\"{\\\"networkId\\\":null,\\\"payload\\\":{\\\"exec\\\":{\\\"data\\\":null,\\\"code\\\":\\\"(coin.get-balance \\\\\\\"<account-name>\\\\\\\")\\\"}},\\\"signers\\\":[],\\\"meta\\\":{\\\"creationTime\\\":0,\\\"ttl\\\":0,\\\"gasLimit\\\":0,\\\"chainId\\\":\\\"\\\",\\\"gasPrice\\\":0,\\\"sender\\\":\\\"\\\"},\\\"nonce\\\":\\\"2019-11-03 01:58:38.266437 UTC\\\"}\"} You can see that most entries are null, and the metadata has been stubbed out for you. If you wish to enter explicit entries for any of these fields, you are welcome, but they will not be used. It is, however, a great way to practice. Sending the Command to Chainweb \u00b6 Once one has a command at the ready, they may send it as JSON using their favorite program to the local pact endpoint of any chainweb node on a chain where the account exists. Using the us-e2 bootstrap node as an example, sending to the local endpoint looks something like the following: curl -X POST \\ https://us-e2.chainweb.com/chainweb/0.0/mainnet01/chain/0/pact/api/v1/local \\ -H 'Content-Type: application/json' \\ -d '{\"hash\":\"SLxYfnaUCH4XjzdK7e4i0Keo3UMjX8axXFp54jT9xS4\",\"sigs\":[{\"sig\":\"b1ce5740c230779ae28d28e6f838fe79dfde00f8443f77a1082d302fe55906d56165ce096234ce870dff03e62ee741460230892b0aadf6ae5e29ae0d2984b80f\"}],\"cmd\":\"{\\\"networkId\\\":\\\"mainnet01\\\",\\\"payload\\\":{\\\"exec\\\":{\\\"data\\\":null,\\\"code\\\":\\\"(coin.details \\\\\\\"ff5f5b2ca782a7586292507bddebdf89a3df1e7438071ee98fd3c09abdb53ea4\\\\\\\")\\\"}},\\\"signers\\\":[{\\\"pubKey\\\":\\\"0f5fbfa90eadd843f18c6ecefc7691926073767f5abf33ef9dbf997fe544c775\\\"}],\\\"meta\\\":{\\\"creationTime\\\":0,\\\"ttl\\\":100000,\\\"gasLimit\\\":1000,\\\"chainId\\\":\\\"3\\\",\\\"gasPrice\\\":1.0e-2,\\\"sender\\\":\\\"emily\\\"},\\\"nonce\\\":\\\"2019-11-02 01:15:52.46679 UTC\\\"}\"}' If this call is successful, then a result is returned immediately with the requested data: { \"gas\" : 0 , \"result\" :{ \"status\" : \"success\" , \"data\" :{ \"guard\" :{ \"pred\" : \"keys-all\" , \"keys\" :[ \"ff5f5b2ca782a7586292507bddebdf89a3df1e7438071ee98fd3c09abdb53ea\" ] }, \"balance\" : <some decimal number here> , \"account\" : \"ff5f5b2ca782a7586292507bddebdf89a3df1e7438071ee98fd3c09abdb53ea4\" } }, \"reqKey\" : \"SLxYfnaUCH4XjzdK7e4i0Keo3UMjX8axXFp54jT9xS4\" , \"logs\" : \"wsATyGqckuIvlm89hhd2j4t6RMkCrcwJe_oeCYr7Th8\" , ... } And voil\u00e1! You have your balance. Automating Pact Local calls \u00b6 The community has provided some wonderful scripts to automate this process, and more are always welcome. Especially if they are robust. Here are a few: @jwiegley 's script can be seen here @emilypi 's pact-local bash script @LindaOrtega 's bash script here . More are welcome. Make sure to ping us when you come up with something so we can add it to the Pact script hall of fame!","title":"Pact Local API Queries"},{"location":"pact-local-queries/#pact-local-api-queries","text":"Chainweb supports the use of the Pact smart contract language, including the local API endpoints defined in the documentation . Using the local API endpoints on any Chainweb node, you can dry-run Pact smart contracts using actual data in the coin contract tables. This is perfect for checking the viability of your smart contracts, as well as to check account data without necessarily having to spend tokens!","title":"Pact Local API Queries"},{"location":"pact-local-queries/#setup","text":"Follow the instructions at pactlang.org to get started with Pact learning the basics. For a more straightforward and technical introduction, just readthedocs . In particular, for any script going on Chainweb, you'll need to understand the API request format .","title":"Setup"},{"location":"pact-local-queries/#creating-a-local-api-request","text":"A local query does not need to make use of any metadata, env data, or signers, so a minimalist API request format is relatively simple: (code|codeFile) : <code goes here> keyPairs : [] For example, if one wanted to check their balance, the following request format would be sufficient: code : (coin.get-balance \"<account name>\") keyPairs : [] Once one has such a yaml, issue pact -l -a <my-script-name>.yaml . The following output should look something like this: {\"hash\":\"<some hash>\",\"sigs\":[],\"cmd\":\"{\\\"networkId\\\":null,\\\"payload\\\":{\\\"exec\\\":{\\\"data\\\":null,\\\"code\\\":\\\"(coin.get-balance \\\\\\\"<account-name>\\\\\\\")\\\"}},\\\"signers\\\":[],\\\"meta\\\":{\\\"creationTime\\\":0,\\\"ttl\\\":0,\\\"gasLimit\\\":0,\\\"chainId\\\":\\\"\\\",\\\"gasPrice\\\":0,\\\"sender\\\":\\\"\\\"},\\\"nonce\\\":\\\"2019-11-03 01:58:38.266437 UTC\\\"}\"} You can see that most entries are null, and the metadata has been stubbed out for you. If you wish to enter explicit entries for any of these fields, you are welcome, but they will not be used. It is, however, a great way to practice.","title":"Creating A Local API Request"},{"location":"pact-local-queries/#sending-the-command-to-chainweb","text":"Once one has a command at the ready, they may send it as JSON using their favorite program to the local pact endpoint of any chainweb node on a chain where the account exists. Using the us-e2 bootstrap node as an example, sending to the local endpoint looks something like the following: curl -X POST \\ https://us-e2.chainweb.com/chainweb/0.0/mainnet01/chain/0/pact/api/v1/local \\ -H 'Content-Type: application/json' \\ -d '{\"hash\":\"SLxYfnaUCH4XjzdK7e4i0Keo3UMjX8axXFp54jT9xS4\",\"sigs\":[{\"sig\":\"b1ce5740c230779ae28d28e6f838fe79dfde00f8443f77a1082d302fe55906d56165ce096234ce870dff03e62ee741460230892b0aadf6ae5e29ae0d2984b80f\"}],\"cmd\":\"{\\\"networkId\\\":\\\"mainnet01\\\",\\\"payload\\\":{\\\"exec\\\":{\\\"data\\\":null,\\\"code\\\":\\\"(coin.details \\\\\\\"ff5f5b2ca782a7586292507bddebdf89a3df1e7438071ee98fd3c09abdb53ea4\\\\\\\")\\\"}},\\\"signers\\\":[{\\\"pubKey\\\":\\\"0f5fbfa90eadd843f18c6ecefc7691926073767f5abf33ef9dbf997fe544c775\\\"}],\\\"meta\\\":{\\\"creationTime\\\":0,\\\"ttl\\\":100000,\\\"gasLimit\\\":1000,\\\"chainId\\\":\\\"3\\\",\\\"gasPrice\\\":1.0e-2,\\\"sender\\\":\\\"emily\\\"},\\\"nonce\\\":\\\"2019-11-02 01:15:52.46679 UTC\\\"}\"}' If this call is successful, then a result is returned immediately with the requested data: { \"gas\" : 0 , \"result\" :{ \"status\" : \"success\" , \"data\" :{ \"guard\" :{ \"pred\" : \"keys-all\" , \"keys\" :[ \"ff5f5b2ca782a7586292507bddebdf89a3df1e7438071ee98fd3c09abdb53ea\" ] }, \"balance\" : <some decimal number here> , \"account\" : \"ff5f5b2ca782a7586292507bddebdf89a3df1e7438071ee98fd3c09abdb53ea4\" } }, \"reqKey\" : \"SLxYfnaUCH4XjzdK7e4i0Keo3UMjX8axXFp54jT9xS4\" , \"logs\" : \"wsATyGqckuIvlm89hhd2j4t6RMkCrcwJe_oeCYr7Th8\" , ... } And voil\u00e1! You have your balance.","title":"Sending the Command to Chainweb"},{"location":"pact-local-queries/#automating-pact-local-calls","text":"The community has provided some wonderful scripts to automate this process, and more are always welcome. Especially if they are robust. Here are a few: @jwiegley 's script can be seen here @emilypi 's pact-local bash script @LindaOrtega 's bash script here . More are welcome. Make sure to ping us when you come up with something so we can add it to the Pact script hall of fame!","title":"Automating Pact Local calls"},{"location":"rest-api-examples/","text":"REST API Examples with curl \u00b6 Setup \u00b6 The following examples make use of the following environment variables. NODE : Hostaddress (IP or domain name) of a chainweb node. CHAINWEB_VERSION : chainweb version to use (e.g. development or testnet02 CHAIN_ID : chain id to use (e.g. 0,1,2...) BLOCKHEADER_HASH : block hash of the header the is queried PAYLOAD_HASH : hash of the payload that is queried UPPER_BOUNDS : a JSON array of block hashes. Used as upper limit (starting points) of branch queries LOWER_BOUNDS : a JSON array of block hashes. Used as lower limit (cut-off points) of branch queries HEADER_ENCODING : the accept header for selecting the block header encoding (see below) NEXT : the value of the next property of a result page. Used as cursor for paging endpoints. LIMIT : the maximum number of items in a requested page. Example setup for testnet: export NODE = us1.tn1.chainweb.com export CHAINWEB_VERSION = development export CHAIN_ID = 0 export HEADER_ENCODING = '-H accept:application/json;blockheader-encoding=object' Example setup for devnet: export NODE = us1.testnet.chainweb.com export CHAINWEB_VERSION = testnet02 export CHAIN_ID = 0 export HEADER_ENCODING = '-H accept:application/json;blockheader-encoding=object' Common Parameters \u00b6 Block Header Encoding \u00b6 Base64 encoded JSON string: export HEADER_ENCODING = '' JSON Object: export HEADER_ENCODING = '-H accept:application/json;blockheader-encoding=object' Binary: export HEADER_ENCODING = '-H accept:application/octet-stream' PAGING \u00b6 Some endpoints return results in JSON object encoded pages. A page object contains the following properties: items : an array of JSON encoded result items, next : the cursor the defines the start of the next page, and limit : the number of items in the result. Paging endpoints support the following optional query parameters: next : the start of the next page. This is a block hash prefixed with either exclusive: or inclusive: . limit : the maximum number of items in the result. The actual number of returned items may be less. Block Height Ranges \u00b6 Endpoints that return lists of block headers or block hashes support the specification of maximum and minimum block heights for the results. maxheight : maximum block height for items included in the result minheight : minimum block height for items included in the result Cut \u00b6 GET current cut \u00b6 curl -sk \"https:// ${ NODE } /chainweb/0.0/ ${ CHAINWEB_VERSION } /cut\" | python -m json.tool PUT current cut \u00b6 curl -sk \"https:// ${ NODE } /chainweb/0.0/ ${ CHAINWEB_VERSION } /cut\" -XPUT -d ${ CUT } | python -m json.tool Block Headers \u00b6 GET block header: \u00b6 Binary: curl -sk \"https:// ${ NODE } /chainweb/0.0/ ${ CHAINWEB_VERSION } /chain/ ${ CHAIN_ID } /header/ ${ BLOCKHEADER_HASH } \" -H accept:application/octet-stream | xxd -p JSON: curl -sk \"https:// ${ NODE } /chainweb/0.0/ ${ CHAINWEB_VERSION } /chain/ ${ CHAIN_ID } /header/ ${ BLOCKHEADER_HASH } \" ${ HEADE_ENCODING } | python -m json.tool Query all headers in ascending order \u00b6 The following queries return all block headers in the block header database including block headers on forks of the chain. Only JSON block header encodings are supported. Binary encoding of block headers isn't supported. First page: curl -sk \"https:// $NODE /chainweb/0.0/ ${ CHAINWEB_VERSION } /chain/ ${ CHAIN_ID } /header\" ${ HEADER_ENCODING } | python -m json.tool curl -sk \"https:// $NODE /chainweb/0.0/ ${ CHAINWEB_VERSION } /chain/ ${ CHAIN_ID } /hash\" | python -m json.tool Next page: curl -sk \"https:// $NODE /chainweb/0.0/ ${ CHAINWEB_VERSION } /chain/ ${ CHAIN_ID } /header?next= ${ NEXT } \" ${ HEADER_ENCODING } | python -m json.tool curl -sk \"https:// $NODE /chainweb/0.0/ ${ CHAINWEB_VERSION } /chain/ ${ CHAIN_ID } /hash?next= ${ NEXT } \" | python -m json.tool where NEXT is the value of the next property of the previous page. Page starting at NEXT block header of size at most LIMIT : curl -sk \"https:// $NODE /chainweb/0.0/ ${ CHAINWEB_VERSION } /chain/ ${ CHAIN_ID } /header?next= ${ NEXT } &limit= ${ LIMIT } \" ${ HEADER_ENCODING } | python -m json.tool curl -sk \"https:// $NODE /chainweb/0.0/ ${ CHAINWEB_VERSION } /chain/ ${ CHAIN_ID } /hash?next= ${ NEXT } &limit= ${ LIMIT } \" | python -m json.tool GET Genesis Block \u00b6 curl -sk \"https:// $NODE /chainweb/0.0/ ${ CHAINWEB_VERSION } /chain/ ${ CHAIN_ID } /header?limit=1\" ${ HEADER_ENCODING } | python -m json.tool curl -sk \"https:// $NODE /chainweb/0.0/ ${ CHAINWEB_VERSION } /chain/ ${ CHAIN_ID } /hash?limit=1\" | python -m json.tool Query headers/hashes in descending order \u00b6 These queries return all predecessors of hashes in UPPER_BOUNDS that are no predecessors of hashes in LOWER_BOUNDS . Results are returned in descending order. Only JSON block header encodings are supported. Binary encoding of block headers isn't supported. The endpoints accepts paging query parameters. POST body: export BOUNDS = \"{\\\"upper\\\": ${ UPPER_BOUNDS } , \\\"lower\\\": ${ LOWER_BOUNDS } }\" Block headers: curl -sk \"https:// $NODE /chainweb/0.0/ ${ CHAINWEB_VERSION } /chain/ ${ CHAIN_ID } /header/branch\" ${ HEADER_ENCODING } -XPOST -d \" ${ BOUNDS } \" -H \"content-type:application/json\" -v | python -m json.tool Block hashes: curl -sk \"https:// $NODE /chainweb/0.0/ ${ CHAINWEB_VERSION } /chain/ ${ CHAIN_ID } /hash/branch\" -XPOST -d \" ${ BOUNDS } \" -H \"content-type:application/json\" -v | python -m json.tool Payloads \u00b6 Without outputs \u00b6 curl -sk \"https:// ${ NODE } /chainweb/0.0/ ${ CHAINWEB_VERSION } /chain/ ${ CHAIN_ID } /payload/ ${ PAYLOAD_HASH } \" | python -m json.tool With outputs \u00b6 curl -sk \"https:// ${ NODE } /chainweb/0.0/ ${ CHAINWEB_VERSION } /chain/ ${ CHAIN_ID } /payload/ ${ PAYLOAD_HASH } /outputs\" | python -m json.tool Peer Database \u00b6 GET cut endpoint \u00b6 curl -sk \"https:// $NODE /chainweb/0.0/ ${ CHAINWEB_VERSION } /cut/peer\" | python -m json.tool PUT cut endpoint \u00b6 curl -sk \"https:// ${ NODE } /chainweb/0.0/ ${ CHAINWEB_VERSION } /cut/peer\" -XPUT -H 'content-type: application/json' -d \" $PEER_INFO \" GET mempool endpoints \u00b6 curl -sk \"https:// $NODE /chainweb/0.0/ ${ CHAINWEB_VERSION } /chain/ ${ CHAIN_ID } /mempool/peer\" | python -m json.tool PUT mempool endpoints \u00b6 curl -sk \"https:// ${ NODE } /chainweb/0.0/ ${ CHAINWEB_VERSION } /chain/ ${ CHAIN_ID } /mempool/peer\" -XPUT -H 'content-type: application/json' -d \" $PEER_INFO \" Compute PeerInfo \u00b6 Generally, it is easier to query the peer info of a peer using a GET query for a peer database. Otherwise the peer info can be computed as follows. For peers with public certificate: PEER_INFO = \"{\\\"address\\\": {\\\"hostname\\\": \\\" $PEER_DOMAIN \\\", \\\"port\\\": 443}}\" For peers with self-signed Certificates: The peer id is the fingerprint of the certificate. echo | openssl s_client -showcerts -servername ${ NODE } -connect ${ NODE } :443 2 >/dev/null | openssl x509 -fingerprint -noout -sha256 | sed 's/://g' | tail -c 65 | xxd -r -p | base64 | tr -d '=' | tr '/+' '_-' The peer info is created as follows: PEER_INFO = \"{\\\"address\\\": {\\\"hostname\\\": \\\" $PEER_IP \\\", \\\"port\\\": 443}, \\\"id\\\": \\\" $PEER_ID \\\"}\"","title":"REST API Examples with curl"},{"location":"rest-api-examples/#rest-api-examples-with-curl","text":"","title":"REST API Examples with curl"},{"location":"rest-api-examples/#setup","text":"The following examples make use of the following environment variables. NODE : Hostaddress (IP or domain name) of a chainweb node. CHAINWEB_VERSION : chainweb version to use (e.g. development or testnet02 CHAIN_ID : chain id to use (e.g. 0,1,2...) BLOCKHEADER_HASH : block hash of the header the is queried PAYLOAD_HASH : hash of the payload that is queried UPPER_BOUNDS : a JSON array of block hashes. Used as upper limit (starting points) of branch queries LOWER_BOUNDS : a JSON array of block hashes. Used as lower limit (cut-off points) of branch queries HEADER_ENCODING : the accept header for selecting the block header encoding (see below) NEXT : the value of the next property of a result page. Used as cursor for paging endpoints. LIMIT : the maximum number of items in a requested page. Example setup for testnet: export NODE = us1.tn1.chainweb.com export CHAINWEB_VERSION = development export CHAIN_ID = 0 export HEADER_ENCODING = '-H accept:application/json;blockheader-encoding=object' Example setup for devnet: export NODE = us1.testnet.chainweb.com export CHAINWEB_VERSION = testnet02 export CHAIN_ID = 0 export HEADER_ENCODING = '-H accept:application/json;blockheader-encoding=object'","title":"Setup"},{"location":"rest-api-examples/#common-parameters","text":"","title":"Common Parameters"},{"location":"rest-api-examples/#block-header-encoding","text":"Base64 encoded JSON string: export HEADER_ENCODING = '' JSON Object: export HEADER_ENCODING = '-H accept:application/json;blockheader-encoding=object' Binary: export HEADER_ENCODING = '-H accept:application/octet-stream'","title":"Block Header Encoding"},{"location":"rest-api-examples/#paging","text":"Some endpoints return results in JSON object encoded pages. A page object contains the following properties: items : an array of JSON encoded result items, next : the cursor the defines the start of the next page, and limit : the number of items in the result. Paging endpoints support the following optional query parameters: next : the start of the next page. This is a block hash prefixed with either exclusive: or inclusive: . limit : the maximum number of items in the result. The actual number of returned items may be less.","title":"PAGING"},{"location":"rest-api-examples/#block-height-ranges","text":"Endpoints that return lists of block headers or block hashes support the specification of maximum and minimum block heights for the results. maxheight : maximum block height for items included in the result minheight : minimum block height for items included in the result","title":"Block Height Ranges"},{"location":"rest-api-examples/#cut","text":"","title":"Cut"},{"location":"rest-api-examples/#get-current-cut","text":"curl -sk \"https:// ${ NODE } /chainweb/0.0/ ${ CHAINWEB_VERSION } /cut\" | python -m json.tool","title":"GET current cut"},{"location":"rest-api-examples/#put-current-cut","text":"curl -sk \"https:// ${ NODE } /chainweb/0.0/ ${ CHAINWEB_VERSION } /cut\" -XPUT -d ${ CUT } | python -m json.tool","title":"PUT current cut"},{"location":"rest-api-examples/#block-headers","text":"","title":"Block Headers"},{"location":"rest-api-examples/#get-block-header","text":"Binary: curl -sk \"https:// ${ NODE } /chainweb/0.0/ ${ CHAINWEB_VERSION } /chain/ ${ CHAIN_ID } /header/ ${ BLOCKHEADER_HASH } \" -H accept:application/octet-stream | xxd -p JSON: curl -sk \"https:// ${ NODE } /chainweb/0.0/ ${ CHAINWEB_VERSION } /chain/ ${ CHAIN_ID } /header/ ${ BLOCKHEADER_HASH } \" ${ HEADE_ENCODING } | python -m json.tool","title":"GET block header:"},{"location":"rest-api-examples/#query-all-headers-in-ascending-order","text":"The following queries return all block headers in the block header database including block headers on forks of the chain. Only JSON block header encodings are supported. Binary encoding of block headers isn't supported. First page: curl -sk \"https:// $NODE /chainweb/0.0/ ${ CHAINWEB_VERSION } /chain/ ${ CHAIN_ID } /header\" ${ HEADER_ENCODING } | python -m json.tool curl -sk \"https:// $NODE /chainweb/0.0/ ${ CHAINWEB_VERSION } /chain/ ${ CHAIN_ID } /hash\" | python -m json.tool Next page: curl -sk \"https:// $NODE /chainweb/0.0/ ${ CHAINWEB_VERSION } /chain/ ${ CHAIN_ID } /header?next= ${ NEXT } \" ${ HEADER_ENCODING } | python -m json.tool curl -sk \"https:// $NODE /chainweb/0.0/ ${ CHAINWEB_VERSION } /chain/ ${ CHAIN_ID } /hash?next= ${ NEXT } \" | python -m json.tool where NEXT is the value of the next property of the previous page. Page starting at NEXT block header of size at most LIMIT : curl -sk \"https:// $NODE /chainweb/0.0/ ${ CHAINWEB_VERSION } /chain/ ${ CHAIN_ID } /header?next= ${ NEXT } &limit= ${ LIMIT } \" ${ HEADER_ENCODING } | python -m json.tool curl -sk \"https:// $NODE /chainweb/0.0/ ${ CHAINWEB_VERSION } /chain/ ${ CHAIN_ID } /hash?next= ${ NEXT } &limit= ${ LIMIT } \" | python -m json.tool","title":"Query all headers in ascending order"},{"location":"rest-api-examples/#get-genesis-block","text":"curl -sk \"https:// $NODE /chainweb/0.0/ ${ CHAINWEB_VERSION } /chain/ ${ CHAIN_ID } /header?limit=1\" ${ HEADER_ENCODING } | python -m json.tool curl -sk \"https:// $NODE /chainweb/0.0/ ${ CHAINWEB_VERSION } /chain/ ${ CHAIN_ID } /hash?limit=1\" | python -m json.tool","title":"GET Genesis Block"},{"location":"rest-api-examples/#query-headershashes-in-descending-order","text":"These queries return all predecessors of hashes in UPPER_BOUNDS that are no predecessors of hashes in LOWER_BOUNDS . Results are returned in descending order. Only JSON block header encodings are supported. Binary encoding of block headers isn't supported. The endpoints accepts paging query parameters. POST body: export BOUNDS = \"{\\\"upper\\\": ${ UPPER_BOUNDS } , \\\"lower\\\": ${ LOWER_BOUNDS } }\" Block headers: curl -sk \"https:// $NODE /chainweb/0.0/ ${ CHAINWEB_VERSION } /chain/ ${ CHAIN_ID } /header/branch\" ${ HEADER_ENCODING } -XPOST -d \" ${ BOUNDS } \" -H \"content-type:application/json\" -v | python -m json.tool Block hashes: curl -sk \"https:// $NODE /chainweb/0.0/ ${ CHAINWEB_VERSION } /chain/ ${ CHAIN_ID } /hash/branch\" -XPOST -d \" ${ BOUNDS } \" -H \"content-type:application/json\" -v | python -m json.tool","title":"Query headers/hashes in descending order"},{"location":"rest-api-examples/#payloads","text":"","title":"Payloads"},{"location":"rest-api-examples/#without-outputs","text":"curl -sk \"https:// ${ NODE } /chainweb/0.0/ ${ CHAINWEB_VERSION } /chain/ ${ CHAIN_ID } /payload/ ${ PAYLOAD_HASH } \" | python -m json.tool","title":"Without outputs"},{"location":"rest-api-examples/#with-outputs","text":"curl -sk \"https:// ${ NODE } /chainweb/0.0/ ${ CHAINWEB_VERSION } /chain/ ${ CHAIN_ID } /payload/ ${ PAYLOAD_HASH } /outputs\" | python -m json.tool","title":"With outputs"},{"location":"rest-api-examples/#peer-database","text":"","title":"Peer Database"},{"location":"rest-api-examples/#get-cut-endpoint","text":"curl -sk \"https:// $NODE /chainweb/0.0/ ${ CHAINWEB_VERSION } /cut/peer\" | python -m json.tool","title":"GET cut endpoint"},{"location":"rest-api-examples/#put-cut-endpoint","text":"curl -sk \"https:// ${ NODE } /chainweb/0.0/ ${ CHAINWEB_VERSION } /cut/peer\" -XPUT -H 'content-type: application/json' -d \" $PEER_INFO \"","title":"PUT cut endpoint"},{"location":"rest-api-examples/#get-mempool-endpoints","text":"curl -sk \"https:// $NODE /chainweb/0.0/ ${ CHAINWEB_VERSION } /chain/ ${ CHAIN_ID } /mempool/peer\" | python -m json.tool","title":"GET mempool endpoints"},{"location":"rest-api-examples/#put-mempool-endpoints","text":"curl -sk \"https:// ${ NODE } /chainweb/0.0/ ${ CHAINWEB_VERSION } /chain/ ${ CHAIN_ID } /mempool/peer\" -XPUT -H 'content-type: application/json' -d \" $PEER_INFO \"","title":"PUT mempool endpoints"},{"location":"rest-api-examples/#compute-peerinfo","text":"Generally, it is easier to query the peer info of a peer using a GET query for a peer database. Otherwise the peer info can be computed as follows. For peers with public certificate: PEER_INFO = \"{\\\"address\\\": {\\\"hostname\\\": \\\" $PEER_DOMAIN \\\", \\\"port\\\": 443}}\" For peers with self-signed Certificates: The peer id is the fingerprint of the certificate. echo | openssl s_client -showcerts -servername ${ NODE } -connect ${ NODE } :443 2 >/dev/null | openssl x509 -fingerprint -noout -sha256 | sed 's/://g' | tail -c 65 | xxd -r -p | base64 | tr -d '=' | tr '/+' '_-' The peer info is created as follows: PEER_INFO = \"{\\\"address\\\": {\\\"hostname\\\": \\\" $PEER_IP \\\", \\\"port\\\": 443}, \\\"id\\\": \\\" $PEER_ID \\\"}\"","title":"Compute PeerInfo"},{"location":"troubleshoot-chainweaver/","text":"Troubleshooting Chainweaver \u00b6 Debian Installation Issues \u00b6 If you think that the install didn't update your chainweaver, jump into a terminal and enter dpkg -s kadena-chainweaver If this doesn't return the chainweaver version that you expect, then the automatic install window didn't work. Type sudo dpkg -i ~/Downloads/kadena-chainweaver_1.0.0_amd64.deb to try to install from the terminal. If something is going wrong, this will give a much better error. Uninstall Chainweaver \u00b6 To remove chainweaver (this won't delete your wallet, just chainweaver itself) to try to reinstall, type sudo dpkg -r kadena-chainweaver in a terminal. OVA Installation Issues \u00b6 Starting the Virtual Machine \u00b6 You don't need to import the ova each time to run chainweaver. To start chainweaver again, open Virtual Box from the start menu. The Virtual Box Manager should open up and you can double click \"Chainweaver VM\". Stopping the Virtual Machine \u00b6 To stop the virtualmachine, it is best to shut it down like a regular computer. Press \"Applications\" in the lower left corner. And press \"Log Off\" then hit \"Shutdown in the Dialog that appears. It is safe to close the \"Virtual Box Manager\" window at this time. Upgrading the Virtual Machine \u00b6 When a new chainweaver is released, you don't need to download a new OVA every time. Instead, close the chainweaver application inside the VM and notice these two icons on the desktop. Click the \"Upgrade Chainweaver\" icon and an update script will start. You can then click the other desktop icon to restart chainweaver. VT-x / AMD-v Error on Import / Startup \u00b6 Virtualbox requires certain hardware acceleration to be able to operate. Almost all modern computers have this feature (VT-x for Intel and AMD-v for AMD CPUs) but some computers ship with it off by default. If you see an error like this when importing or starting the VM, it is turned off for your computer. You'll need to turn this on in your system firmware menu. Known systems where this is necessary are: Lenovo: https://support.lenovo.com/au/en/solutions/ht500006","title":"Troubleshooting Chainweaver"},{"location":"troubleshoot-chainweaver/#troubleshooting-chainweaver","text":"","title":"Troubleshooting Chainweaver"},{"location":"troubleshoot-chainweaver/#debian-installation-issues","text":"If you think that the install didn't update your chainweaver, jump into a terminal and enter dpkg -s kadena-chainweaver If this doesn't return the chainweaver version that you expect, then the automatic install window didn't work. Type sudo dpkg -i ~/Downloads/kadena-chainweaver_1.0.0_amd64.deb to try to install from the terminal. If something is going wrong, this will give a much better error.","title":"Debian Installation Issues"},{"location":"troubleshoot-chainweaver/#uninstall-chainweaver","text":"To remove chainweaver (this won't delete your wallet, just chainweaver itself) to try to reinstall, type sudo dpkg -r kadena-chainweaver in a terminal.","title":"Uninstall Chainweaver"},{"location":"troubleshoot-chainweaver/#ova-installation-issues","text":"","title":"OVA Installation Issues"},{"location":"troubleshoot-chainweaver/#starting-the-virtual-machine","text":"You don't need to import the ova each time to run chainweaver. To start chainweaver again, open Virtual Box from the start menu. The Virtual Box Manager should open up and you can double click \"Chainweaver VM\".","title":"Starting the Virtual Machine"},{"location":"troubleshoot-chainweaver/#stopping-the-virtual-machine","text":"To stop the virtualmachine, it is best to shut it down like a regular computer. Press \"Applications\" in the lower left corner. And press \"Log Off\" then hit \"Shutdown in the Dialog that appears. It is safe to close the \"Virtual Box Manager\" window at this time.","title":"Stopping the Virtual Machine"},{"location":"troubleshoot-chainweaver/#upgrading-the-virtual-machine","text":"When a new chainweaver is released, you don't need to download a new OVA every time. Instead, close the chainweaver application inside the VM and notice these two icons on the desktop. Click the \"Upgrade Chainweaver\" icon and an update script will start. You can then click the other desktop icon to restart chainweaver.","title":"Upgrading the Virtual Machine"},{"location":"troubleshoot-chainweaver/#vt-x-amd-v-error-on-import-startup","text":"Virtualbox requires certain hardware acceleration to be able to operate. Almost all modern computers have this feature (VT-x for Intel and AMD-v for AMD CPUs) but some computers ship with it off by default. If you see an error like this when importing or starting the VM, it is turned off for your computer. You'll need to turn this on in your system firmware menu. Known systems where this is necessary are: Lenovo: https://support.lenovo.com/au/en/solutions/ht500006","title":"VT-x / AMD-v Error on Import / Startup"},{"location":"troubleshoot-chainweb/","text":"Troubleshooting Chainweb \u00b6 Running a Node \u00b6 Peer Sync Errors \u00b6 If you're running a node and getting something like this the following, then it means that peer synchronization has failed: ( InternalException ( HostCannotConnect \"76.170.96.97\" [ Network . Socket . connect : < socket : 142 >: does not exist ( Connection refused )]))) 2019 - 11 - 01 T05: 10 : 29.869 Z [ Warn ] [ chainwebVersion = mainnet01 | peerId = E --IPo|port=4430|host=<some host>|component=cut|sub-component=sync|sync=payload] failed to sync peers from <some node>:7463#Asb8rw: ConnectionError (HttpExceptionRequest Request { host = \"<some host>\" port = 7463 secure = True requestHeaders = [( \"Accept\" , \"application/json;charset=utf-8,application/json\" )] path = \"/chainweb/0.0/mainnet01/cut/peer\" queryString = \"\" method = \"GET\" proxy = Nothing rawBody = False redirectCount = 10 responseTimeout = ResponseTimeoutMicro 10000000 requestVersion = HTTP / 1.1 } This can happen for a variety of reasons. Out of date binaries One of the most prevalent is that a node is attempting to enter the network with out of date binaries or dependencies. For example, if a node is attempting to synchronize with an improper version of librocksdb , then peer synchronization will fail. The solution is to make that all are up to date with the most recent official release of chainweb-node . Timeout exceptions If the synchronizing node fails to provide timely feedback, nodes will receive a timeout exception. In general this is fine, and only considered a warning. No cause for alarm, and nodes can sync to alternative nodes in the meantime. These exceptions are usually post-fixed by a ConnectionTimeout statement. Something went wrong \"Something went wrong\" exceptions are thrown when an internal server error occurs due to misconfiguration. Just in case, however, consider asking in the Discord to check with us and make sure your node is configured correctly and on a happy path. Regenerate deleted configs \u00b6 Issue ./chainweb-node --print-config to create a fresh config yaml. Mining KDA \u00b6 Discover peers to mine \u00b6 Every chainweb node maintains a list of peers. If you want a list of peers to mine, curl the /cut/peer endpoint on any node to discover its list of peers. A good start would be any bootstrap node: \u2192 curl -sk \"https://us-e2.chainweb.com/chainweb/0.0/mainnet01/cut/peer\" | python -m json.tool | grep hostname \"hostname\" : \"foo.com\" \"hostname\" : \"blah.org\" ... See if a node is minable \u00b6 Keep up to date with the list of minable nodes, or to test or yourself, point your miner at any of the available nodes and see if it starts mining. This is easiest if you set the default log level to debug . For example: ./chainweb-miner cpu --cores 2 --node us-w2.chainweb.com:443 --miner-account <some account> --miner-key <some key> --log-level debug Balance isn't showing up after mining a block \u00b6 Proof-of-Work algorithms rely on the fact that only one winning chain is chosen after a certain length of time. In the meantime, there can be many competing chains which can become several (up to 10's of) blocks long on which you'll see your miner potentially winning blocks. When a winner is chosen and the forks resolve, only those blocks mined by miners on the winning chain will be perceived by the network to be correct, and they will be awarded a block reward. As a result, you can do mining for a while and win a ton of blocks, but if you're mining on a fork you may subsequently not see a change in balance if the fork does not win the race. The solution to this is to help contribute to a healthy distribution of hash power across the network by running your own node and making sure not to centralize your mining attempts on particularly powerful nodes. 404 Errors \u00b6 Miners will receive 404 errors when miners fail to connect to a node. This can happen for a variety of reasons: Network misconfiguration If you do not have incoming and outgoing SSL traffic enabled on your router, miners will 404. Please make sure that you have the correct router configuration. NATs tend to be a problem if you are running on AWS. Make sure this is off . The node is down If you receive a 404, the node may be down. Diagnose this by either pinging a node with ping -c 3 <node ip> and seeing if it pings back or sending a cURL request to a node's health check endpoint: curl -k https://<node-ip>:443/health-check A healthy node should return the following: Health check OK. If a node is down, simply switch your miner to a new node which is up. In general, bootstrap nodes should always be up for mining, but it is usually fastest to mine to a peer due to lower congestion rates.","title":"Troubleshooting Chainweb"},{"location":"troubleshoot-chainweb/#troubleshooting-chainweb","text":"","title":"Troubleshooting Chainweb"},{"location":"troubleshoot-chainweb/#running-a-node","text":"","title":"Running a Node"},{"location":"troubleshoot-chainweb/#peer-sync-errors","text":"If you're running a node and getting something like this the following, then it means that peer synchronization has failed: ( InternalException ( HostCannotConnect \"76.170.96.97\" [ Network . Socket . connect : < socket : 142 >: does not exist ( Connection refused )]))) 2019 - 11 - 01 T05: 10 : 29.869 Z [ Warn ] [ chainwebVersion = mainnet01 | peerId = E --IPo|port=4430|host=<some host>|component=cut|sub-component=sync|sync=payload] failed to sync peers from <some node>:7463#Asb8rw: ConnectionError (HttpExceptionRequest Request { host = \"<some host>\" port = 7463 secure = True requestHeaders = [( \"Accept\" , \"application/json;charset=utf-8,application/json\" )] path = \"/chainweb/0.0/mainnet01/cut/peer\" queryString = \"\" method = \"GET\" proxy = Nothing rawBody = False redirectCount = 10 responseTimeout = ResponseTimeoutMicro 10000000 requestVersion = HTTP / 1.1 } This can happen for a variety of reasons. Out of date binaries One of the most prevalent is that a node is attempting to enter the network with out of date binaries or dependencies. For example, if a node is attempting to synchronize with an improper version of librocksdb , then peer synchronization will fail. The solution is to make that all are up to date with the most recent official release of chainweb-node . Timeout exceptions If the synchronizing node fails to provide timely feedback, nodes will receive a timeout exception. In general this is fine, and only considered a warning. No cause for alarm, and nodes can sync to alternative nodes in the meantime. These exceptions are usually post-fixed by a ConnectionTimeout statement. Something went wrong \"Something went wrong\" exceptions are thrown when an internal server error occurs due to misconfiguration. Just in case, however, consider asking in the Discord to check with us and make sure your node is configured correctly and on a happy path.","title":"Peer Sync Errors"},{"location":"troubleshoot-chainweb/#regenerate-deleted-configs","text":"Issue ./chainweb-node --print-config to create a fresh config yaml.","title":"Regenerate deleted configs"},{"location":"troubleshoot-chainweb/#mining-kda","text":"","title":"Mining KDA"},{"location":"troubleshoot-chainweb/#discover-peers-to-mine","text":"Every chainweb node maintains a list of peers. If you want a list of peers to mine, curl the /cut/peer endpoint on any node to discover its list of peers. A good start would be any bootstrap node: \u2192 curl -sk \"https://us-e2.chainweb.com/chainweb/0.0/mainnet01/cut/peer\" | python -m json.tool | grep hostname \"hostname\" : \"foo.com\" \"hostname\" : \"blah.org\" ...","title":"Discover peers to mine"},{"location":"troubleshoot-chainweb/#see-if-a-node-is-minable","text":"Keep up to date with the list of minable nodes, or to test or yourself, point your miner at any of the available nodes and see if it starts mining. This is easiest if you set the default log level to debug . For example: ./chainweb-miner cpu --cores 2 --node us-w2.chainweb.com:443 --miner-account <some account> --miner-key <some key> --log-level debug","title":"See if a node is minable"},{"location":"troubleshoot-chainweb/#balance-isnt-showing-up-after-mining-a-block","text":"Proof-of-Work algorithms rely on the fact that only one winning chain is chosen after a certain length of time. In the meantime, there can be many competing chains which can become several (up to 10's of) blocks long on which you'll see your miner potentially winning blocks. When a winner is chosen and the forks resolve, only those blocks mined by miners on the winning chain will be perceived by the network to be correct, and they will be awarded a block reward. As a result, you can do mining for a while and win a ton of blocks, but if you're mining on a fork you may subsequently not see a change in balance if the fork does not win the race. The solution to this is to help contribute to a healthy distribution of hash power across the network by running your own node and making sure not to centralize your mining attempts on particularly powerful nodes.","title":"Balance isn't showing up after mining a block"},{"location":"troubleshoot-chainweb/#404-errors","text":"Miners will receive 404 errors when miners fail to connect to a node. This can happen for a variety of reasons: Network misconfiguration If you do not have incoming and outgoing SSL traffic enabled on your router, miners will 404. Please make sure that you have the correct router configuration. NATs tend to be a problem if you are running on AWS. Make sure this is off . The node is down If you receive a 404, the node may be down. Diagnose this by either pinging a node with ping -c 3 <node ip> and seeing if it pings back or sending a cURL request to a node's health check endpoint: curl -k https://<node-ip>:443/health-check A healthy node should return the following: Health check OK. If a node is down, simply switch your miner to a new node which is up. In general, bootstrap nodes should always be up for mining, but it is usually fastest to mine to a peer due to lower congestion rates.","title":"404 Errors"},{"location":"what-is-kadena/","text":"What is Kadena? \u00b6 Why Kadena Matters \u00b6 The purpose of Kadena is to be a single source for the resources needed to build blockchain applications. In doing so, Kadena solves many of the problems that have impeded widespread blockchain adoption to date including scalability, security, and ease-of-use. 1. Scalability \u00b6 The public blockchain is a Proof of Work protocol that has solved layer-1 scalability. This is achieved by braiding together several Bitcoin-like chains. As transaction volume increases, the network can expand to larger configurations (eg. from 10 chains to 20 chains) and deliver higher throughput capacity. 2. Security \u00b6 The smart contract language, Pact, is Turing Incomplete and offers Formal Verification. Turing Incompleteness reduces the language\u2019s attack surface without compromising domain-specific functionality. Formal Verification allows smart contract authors to mathematically prove that their code does not contain bugs. 3. Ease-of-use \u00b6 Kadena was developed in part to be integrated into traditional business workflows and understood by non-technical users. Accordingly, Pact code is executed directly on the ledger and is stored in a human-readable format. Pact code has error messages and Pact contracts are upgradable allowing developers to fix errors or adapt logic as business needs evolve. Kadena is among the first blockchain projects to deliver such a comprehensive feature-set. Further, users are able to enjoy these features across Kadena\u2019s hybrid blockchain platform, a public-private interoperable network. This hybrid solution allows users to take advantage of the benefits from both public and private blockchains without compromise, thus enabling use cases that were previously not possible. Components of the Kadena Platform \u00b6 Kadena is a hybrid blockchain platform consisting of a public chain protocol called Chainweb and a private chain protocol called Kuro. The public and private networks are interoperable through the smart contract language Pact. 1. Chainweb, Kadena\u2019s public blockchain protocol \u00b6 HEADLINE: Chainweb is a braided, parallelized proof-of-work consensus mechanism that improves throughput and scalability while maintaining the security and integrity found in Bitcoin. Informational Resources Article: Kadena\u2019s Public Blockchain 101 Whitepaper: Chainweb Resources for interacting with Kadena\u2019s public blockchain are available at the Public chain interaction page. 2. Kuro, Kadena\u2019s private blockchain \u00b6 HEADLINE: Kuro has been proven to support up to 8,000 transactions per second across 500 nodes, and is available for evaluation on AWS and Azure . Informational Resources Article: Kadena\u2019s Private Blockchain 101 Whitepaper: Private Blockchain Resources for deploying Kuro are available at the Private chain deployment page. 3. Pact, Kadena\u2019s smart contract language \u00b6 HEADLINE: Pact is a human readable and Turing Incomplete smart contract language purpose-built for blockchains with powerful security features including full Formal Verification of user code, error messages, contract upgradability, support for interoperability, and strong permission and access control. Informational Resources Article: Safer, Smarter Contracts with Pact Whitepaper: Pact Smart Contract Language Documentation: Pact GitHub Documentation: Pact Language Reference Resources for using Pact are available at the Public chain interaction page. Hybrid Blockchain \u00b6 HEADLINE: Kadena\u2019s hybrid blockchain allows users to interact between public and private networks, gaining the decentralization of public and the security controls of private, to make a more secure digital marketplace. Informational Resources Article: Hybrid Blockchain 101 Article: Smart Contract Sharing Economy","title":"What is Kadena?"},{"location":"what-is-kadena/#what-is-kadena","text":"","title":"What is Kadena?"},{"location":"what-is-kadena/#why-kadena-matters","text":"The purpose of Kadena is to be a single source for the resources needed to build blockchain applications. In doing so, Kadena solves many of the problems that have impeded widespread blockchain adoption to date including scalability, security, and ease-of-use.","title":"Why Kadena Matters"},{"location":"what-is-kadena/#1-scalability","text":"The public blockchain is a Proof of Work protocol that has solved layer-1 scalability. This is achieved by braiding together several Bitcoin-like chains. As transaction volume increases, the network can expand to larger configurations (eg. from 10 chains to 20 chains) and deliver higher throughput capacity.","title":"1. Scalability"},{"location":"what-is-kadena/#2-security","text":"The smart contract language, Pact, is Turing Incomplete and offers Formal Verification. Turing Incompleteness reduces the language\u2019s attack surface without compromising domain-specific functionality. Formal Verification allows smart contract authors to mathematically prove that their code does not contain bugs.","title":"2. Security"},{"location":"what-is-kadena/#3-ease-of-use","text":"Kadena was developed in part to be integrated into traditional business workflows and understood by non-technical users. Accordingly, Pact code is executed directly on the ledger and is stored in a human-readable format. Pact code has error messages and Pact contracts are upgradable allowing developers to fix errors or adapt logic as business needs evolve. Kadena is among the first blockchain projects to deliver such a comprehensive feature-set. Further, users are able to enjoy these features across Kadena\u2019s hybrid blockchain platform, a public-private interoperable network. This hybrid solution allows users to take advantage of the benefits from both public and private blockchains without compromise, thus enabling use cases that were previously not possible.","title":"3. Ease-of-use"},{"location":"what-is-kadena/#components-of-the-kadena-platform","text":"Kadena is a hybrid blockchain platform consisting of a public chain protocol called Chainweb and a private chain protocol called Kuro. The public and private networks are interoperable through the smart contract language Pact.","title":"Components of the Kadena Platform"},{"location":"what-is-kadena/#1-chainweb-kadenas-public-blockchain-protocol","text":"HEADLINE: Chainweb is a braided, parallelized proof-of-work consensus mechanism that improves throughput and scalability while maintaining the security and integrity found in Bitcoin. Informational Resources Article: Kadena\u2019s Public Blockchain 101 Whitepaper: Chainweb Resources for interacting with Kadena\u2019s public blockchain are available at the Public chain interaction page.","title":"1. Chainweb, Kadena\u2019s public blockchain protocol"},{"location":"what-is-kadena/#2-kuro-kadenas-private-blockchain","text":"HEADLINE: Kuro has been proven to support up to 8,000 transactions per second across 500 nodes, and is available for evaluation on AWS and Azure . Informational Resources Article: Kadena\u2019s Private Blockchain 101 Whitepaper: Private Blockchain Resources for deploying Kuro are available at the Private chain deployment page.","title":"2. Kuro, Kadena\u2019s private blockchain"},{"location":"what-is-kadena/#3-pact-kadenas-smart-contract-language","text":"HEADLINE: Pact is a human readable and Turing Incomplete smart contract language purpose-built for blockchains with powerful security features including full Formal Verification of user code, error messages, contract upgradability, support for interoperability, and strong permission and access control. Informational Resources Article: Safer, Smarter Contracts with Pact Whitepaper: Pact Smart Contract Language Documentation: Pact GitHub Documentation: Pact Language Reference Resources for using Pact are available at the Public chain interaction page.","title":"3. Pact, Kadena\u2019s smart contract language"},{"location":"what-is-kadena/#hybrid-blockchain","text":"HEADLINE: Kadena\u2019s hybrid blockchain allows users to interact between public and private networks, gaining the decentralization of public and the security controls of private, to make a more secure digital marketplace. Informational Resources Article: Hybrid Blockchain 101 Article: Smart Contract Sharing Economy","title":"Hybrid Blockchain"},{"location":"what-is-kda/","text":"What is KDA? \u00b6 What does the KDA token do? \u00b6 KDA is a digital currency that is used to pay for compute on the Kadena public chain. Similar to ETH on Ethereum, KDA on Kadena is the manner by which miners are compensated for mining blocks on the network and is the transaction fee that users pay in order to have their transactions included in a block. What is Kadena\u2019s token economic model? \u00b6 Kadena\u2019s Token Economic Model describes the total supply, liquidity schedule, allocation and platform reserve uses of KDA. A full text of Kadena\u2019s Token Economic Model is here . What is the total token supply? \u00b6 The total supply is fixed at 1 billion tokens to be mined over 120 years What is the total number of tokens in circulation? \u00b6 See Token Economic Model for more detailed information How is the total token supply allocated? \u00b6 See Token Economic Model for more detailed information How to Buy Kadena (KDA) \u00b6 In order to interact with the Kadena network, you will need to own KDA. Unless you are mining, the only way to acquire KDA is from someone that already owns it. Message regarding exchange listing from Kadena CEO, Will Martino: \u201cWhile exchange listing was always a high priority and something we\u2019ve been working on for a couple months, launching the platform came first. Now that we\u2019ve delivered the platform, getting listed on a major exchange takes its place at the top of our goals. As such, we\u2019re working to see if we can get listed on a larger exchange and also talking to smaller exchanges to explore all of our options. Needless to say, diligence has increased in the current regulatory landscape and that impacts the listing process. Listing on a premier exchange is a months-long process and it is not something that we have full control over. Moreover, the process is very sensitive and thus we\u2019re unable to share updates and statuses with the transparency we\u2019d prefer. When we reach an agreement and after a contract gets signed, it can take 4-6 weeks for integration. However, we look forward to making an announcement as soon as there is more news.\u201d","title":"What is KDA?"},{"location":"what-is-kda/#what-is-kda","text":"","title":"What is KDA?"},{"location":"what-is-kda/#what-does-the-kda-token-do","text":"KDA is a digital currency that is used to pay for compute on the Kadena public chain. Similar to ETH on Ethereum, KDA on Kadena is the manner by which miners are compensated for mining blocks on the network and is the transaction fee that users pay in order to have their transactions included in a block.","title":"What does the KDA token do?"},{"location":"what-is-kda/#what-is-kadenas-token-economic-model","text":"Kadena\u2019s Token Economic Model describes the total supply, liquidity schedule, allocation and platform reserve uses of KDA. A full text of Kadena\u2019s Token Economic Model is here .","title":"What is Kadena\u2019s token economic model?"},{"location":"what-is-kda/#what-is-the-total-token-supply","text":"The total supply is fixed at 1 billion tokens to be mined over 120 years","title":"What is the total token supply?"},{"location":"what-is-kda/#what-is-the-total-number-of-tokens-in-circulation","text":"See Token Economic Model for more detailed information","title":"What is the total number of tokens in circulation?"},{"location":"what-is-kda/#how-is-the-total-token-supply-allocated","text":"See Token Economic Model for more detailed information","title":"How is the total token supply allocated?"},{"location":"what-is-kda/#how-to-buy-kadena-kda","text":"In order to interact with the Kadena network, you will need to own KDA. Unless you are mining, the only way to acquire KDA is from someone that already owns it. Message regarding exchange listing from Kadena CEO, Will Martino: \u201cWhile exchange listing was always a high priority and something we\u2019ve been working on for a couple months, launching the platform came first. Now that we\u2019ve delivered the platform, getting listed on a major exchange takes its place at the top of our goals. As such, we\u2019re working to see if we can get listed on a larger exchange and also talking to smaller exchanges to explore all of our options. Needless to say, diligence has increased in the current regulatory landscape and that impacts the listing process. Listing on a premier exchange is a months-long process and it is not something that we have full control over. Moreover, the process is very sensitive and thus we\u2019re unable to share updates and statuses with the transparency we\u2019d prefer. When we reach an agreement and after a contract gets signed, it can take 4-6 weeks for integration. However, we look forward to making an announcement as soon as there is more news.\u201d","title":"How to Buy Kadena (KDA)"},{"location":"Chainweaver/","text":"Test page for image \u00b6","title":"Test page for image"},{"location":"Chainweaver/#test-page-for-image","text":"","title":"Test page for image"},{"location":"Chainweb/Keys-and-Wallets/","text":"Kadena Developed \u00b6 Chainweaver - Chainweaver is the official cryptocurrency and smart contract wallet software for the Kadena public blockchain. Currently supports MacOs. Transaction Tester Tool - A simple way to write Pact code and test it out Official Balance Checker - Allows you to quickly check your balance by inputting a chain address and an account name Officially Recommended \u00b6 ZelCore (wallet): Officially supported third-party multi-asset wallet Community Developed \u00b6 Bag of Holding - Terminal Wallet Linux Key Generator - Tools for doing high security key generation Simple Javascript Tools to transfer Kadena coins - Simple Javascript tools to transfer Kadena coins How to generate a KDA address - A medium article by Thanos on how to Generate a KDA address","title":"Keys and Wallets"},{"location":"Chainweb/Keys-and-Wallets/#kadena-developed","text":"Chainweaver - Chainweaver is the official cryptocurrency and smart contract wallet software for the Kadena public blockchain. Currently supports MacOs. Transaction Tester Tool - A simple way to write Pact code and test it out Official Balance Checker - Allows you to quickly check your balance by inputting a chain address and an account name","title":"Kadena Developed"},{"location":"Chainweb/Keys-and-Wallets/#officially-recommended","text":"ZelCore (wallet): Officially supported third-party multi-asset wallet","title":"Officially Recommended"},{"location":"Chainweb/Keys-and-Wallets/#community-developed","text":"Bag of Holding - Terminal Wallet Linux Key Generator - Tools for doing high security key generation Simple Javascript Tools to transfer Kadena coins - Simple Javascript tools to transfer Kadena coins How to generate a KDA address - A medium article by Thanos on how to Generate a KDA address","title":"Community Developed"},{"location":"Chainweb/Other/","text":"Kadena Developed \u00b6 Block Explorer - Block Explorer is an analytics tool for the Kadena platform which visualizes the mining, propagation and braiding of blocks across multiple Kadena chains in real time. Testnet Portal From here, you can download Chainweaver (our wallet, currently for MacOs), get testnet coins and play games Community Developed \u00b6 Active Node List Bootstrap Node Database Backup- http://bigchungusmining.energy/db/ - OR - http://node-dbs.chainweb.com/db-chainweb-node-ubuntu.18.04-latest.tar.gz","title":"Other"},{"location":"Chainweb/Other/#kadena-developed","text":"Block Explorer - Block Explorer is an analytics tool for the Kadena platform which visualizes the mining, propagation and braiding of blocks across multiple Kadena chains in real time. Testnet Portal From here, you can download Chainweaver (our wallet, currently for MacOs), get testnet coins and play games","title":"Kadena Developed"},{"location":"Chainweb/Other/#community-developed","text":"Active Node List Bootstrap Node Database Backup- http://bigchungusmining.energy/db/ - OR - http://node-dbs.chainweb.com/db-chainweb-node-ubuntu.18.04-latest.tar.gz","title":"Community Developed"},{"location":"Chainweb/chainweb-miner-actions/","text":"Community Developed \u00b6 BigOlChungus - Open Source Linux AMD/Nvidia OpenCL miner (One instance per card) KDA-Miner - Open Source Linux AMD/Nvidia OpenCL miner (10% Fee) NoncerPro-Kadena - Closed Source Linux/Windows Nvidia Cuda miner (2% fee) SRBMiner - Closed Source Linux/Windows AMD miner (2% fee) How to Mine Kadena - A medium article by Thanos on how to solo mine Kadena","title":"Chainweb miner actions"},{"location":"Chainweb/chainweb-miner-actions/#community-developed","text":"BigOlChungus - Open Source Linux AMD/Nvidia OpenCL miner (One instance per card) KDA-Miner - Open Source Linux AMD/Nvidia OpenCL miner (10% Fee) NoncerPro-Kadena - Closed Source Linux/Windows Nvidia Cuda miner (2% fee) SRBMiner - Closed Source Linux/Windows AMD miner (2% fee) How to Mine Kadena - A medium article by Thanos on how to solo mine Kadena","title":"Community Developed"},{"location":"Chainweb/chainweb-node-actions/","text":"Kadena Developed \u00b6 Chainweb - This takes you to the release page for the Chainweb-node GitHub project. Use this if you want to run your own node. Community Developed \u00b6 Setup a Node - Instructions on how to setup a Kadena node","title":"Chainweb node actions"},{"location":"Chainweb/chainweb-node-actions/#kadena-developed","text":"Chainweb - This takes you to the release page for the Chainweb-node GitHub project. Use this if you want to run your own node.","title":"Kadena Developed"},{"location":"Chainweb/chainweb-node-actions/#community-developed","text":"Setup a Node - Instructions on how to setup a Kadena node","title":"Community Developed"},{"location":"Pact/Pact/","text":"Pact is a human-readable smart contract language. It allows anyone to write clearly, directly and safely onto a blockchain \u2014 a true innovation for secure and simple smart contract development. Pact will enable you to create entirely new business models and on-chain services. For tutorials, please visit pactlang.org Check out the Pact Cookbook to see how Pact gives you tools to do safe transfers that guarantee that you don't accidentally send coins into a black hole and much much more.","title":"Pact"},{"location":"coming-soon/coming-soon/","text":"Coming Soon \u00b6 We're working hard to bring you more tutorials! These advanced Pact Tutorials are currently under development. Stay in touch while you wait \u00b6 Subscribe to our YouTube channel to access the latest Pact tutorials. Join the Discord Channel for community discussion Follow the Pact GitHub page for the latest updates on Pact development Ask questions about Pact on Stack Overflow using #pact-lang Get the latest Kadena updates and workshop announcements from our Newsletter or on Twitter @kadena_io View our Pact Beginner Tutorials to get an overview of the Pact language basics.","title":"Coming Soon"},{"location":"coming-soon/coming-soon/#coming-soon","text":"We're working hard to bring you more tutorials! These advanced Pact Tutorials are currently under development.","title":"Coming Soon"},{"location":"coming-soon/coming-soon/#stay-in-touch-while-you-wait","text":"Subscribe to our YouTube channel to access the latest Pact tutorials. Join the Discord Channel for community discussion Follow the Pact GitHub page for the latest updates on Pact development Ask questions about Pact on Stack Overflow using #pact-lang Get the latest Kadena updates and workshop announcements from our Newsletter or on Twitter @kadena_io View our Pact Beginner Tutorials to get an overview of the Pact language basics.","title":"Stay in touch while you wait"},{"location":"coming-soon/my-file/","text":"Hey here is my file. I have more changes to make.","title":"My file"},{"location":"cookbook/","text":"Pact Cookbook \u00b6 Safe Transfer Safe Rotate and Drain","title":"Pact Cookbook"},{"location":"cookbook/#pact-cookbook","text":"Safe Transfer Safe Rotate and Drain","title":"Pact Cookbook"},{"location":"cookbook/safe-rotate-and-drain/","text":"Safe Rotate and Drain \u00b6 This takes an account rotest owned by key 2993f795d133fa5d0fd877a641cabc8b28cd36147f666988cacbaa4379d1ff93 , rotates it to key dea647009295dc015ba6e6359b85bafe09d2ce935a03c3bf83f775442d539025 , and transfers the whole balance to another account croesus . The croesus account pays the gas which makes it easy to drain the rotest account balance to exactly zero. The transfer out of rotest happens after the key is rotated which means that this transaction MUST be signed by the key you are rotating to and is therefore \"safe\"...i.e. it is impoossible to accidentally rotate to an incorrect key and lose control of the rotest account. Signing \u00b6 This transaction must be signed by both the key that owns rotest at the beginning and the key that owns rotest at the end. Transaction Template \u00b6 code : |- (use coin) (let* ((acct:string \"rotest\") (bal:decimal (coin.get-balance acct)) ) (coin.rotate acct (read-keyset \"ks\")) (coin.transfer acct \"croesus\" bal) ) data : ks : keys : [ dea647009295dc015ba6e6359b85bafe09d2ce935a03c3bf83f775442d539025 ] pred : \"keys-all\" publicMeta : chainId : \"0\" sender : croesus gasLimit : 800 gasPrice : 0.00001 ttl : 86400 networkId : \"testnet04\" signers : - public : 2993f795d133fa5d0fd877a641cabc8b28cd36147f666988cacbaa4379d1ff93 caps : - name : coin.GAS args : [] - name : coin.ROTATE args : [ \"rotest\" ] - public : dea647009295dc015ba6e6359b85bafe09d2ce935a03c3bf83f775442d539025 caps : - name : coin.TRANSFER args : [ \"rotest\" , \"croesus\" , 100 ] type : exec","title":"Safe Rotate and Drain"},{"location":"cookbook/safe-rotate-and-drain/#safe-rotate-and-drain","text":"This takes an account rotest owned by key 2993f795d133fa5d0fd877a641cabc8b28cd36147f666988cacbaa4379d1ff93 , rotates it to key dea647009295dc015ba6e6359b85bafe09d2ce935a03c3bf83f775442d539025 , and transfers the whole balance to another account croesus . The croesus account pays the gas which makes it easy to drain the rotest account balance to exactly zero. The transfer out of rotest happens after the key is rotated which means that this transaction MUST be signed by the key you are rotating to and is therefore \"safe\"...i.e. it is impoossible to accidentally rotate to an incorrect key and lose control of the rotest account.","title":"Safe Rotate and Drain"},{"location":"cookbook/safe-rotate-and-drain/#signing","text":"This transaction must be signed by both the key that owns rotest at the beginning and the key that owns rotest at the end.","title":"Signing"},{"location":"cookbook/safe-rotate-and-drain/#transaction-template","text":"code : |- (use coin) (let* ((acct:string \"rotest\") (bal:decimal (coin.get-balance acct)) ) (coin.rotate acct (read-keyset \"ks\")) (coin.transfer acct \"croesus\" bal) ) data : ks : keys : [ dea647009295dc015ba6e6359b85bafe09d2ce935a03c3bf83f775442d539025 ] pred : \"keys-all\" publicMeta : chainId : \"0\" sender : croesus gasLimit : 800 gasPrice : 0.00001 ttl : 86400 networkId : \"testnet04\" signers : - public : 2993f795d133fa5d0fd877a641cabc8b28cd36147f666988cacbaa4379d1ff93 caps : - name : coin.GAS args : [] - name : coin.ROTATE args : [ \"rotest\" ] - public : dea647009295dc015ba6e6359b85bafe09d2ce935a03c3bf83f775442d539025 caps : - name : coin.TRANSFER args : [ \"rotest\" , \"croesus\" , 100 ] type : exec","title":"Transaction Template"},{"location":"cookbook/safe-transfer/","text":"Safe Transfer \u00b6 Many cryptocurrencies are plagued by the problem of users losing coins by making a mistake with the public key they are transferring to and discovering that the private key they thought would control the money doesn't work. Pact allows you to construct coin transfers in a way that guarantees that someone is in possession of the correct private key and it will work to access the coins. This transaction does this by doing two transfers in a single transaction, one from alice to bob for the desired amount plus a small amount extra coins for a test transfer, and one from bob to alice transferring back the extra amount. This is most important when you are doing transfer-create because that is when you are defining the new account's keyset. Signing \u00b6 This transaction must be signed by both the alice and bob accounts and each signature must have the appropriate coin.TRANSFER capability. In this example, the public key for the account alice is 6be2f485a7af75fedb4b7f153a903f7e6000ca4aa501179c91a2450b777bd2a7 and the public key for bob is 368820f80c324bbc7c2b0610688a7da43e39f91d118732671cd9c7500ff43cca . Transaction Template \u00b6 code : |- (coin.transfer-create \"alice\" \"bob\" (read-keyset \"ks\") 200.1) (coin.transfer \"bob\" \"alice\" 0.1) data : ks : keys : [ 368820f80c324bbc7c2b0610688a7da43e39f91d118732671cd9c7500ff43cca ] pred : \"keys-all\" publicMeta : chainId : \"0\" sender : alice gasLimit : 1200 gasPrice : 0.00001 ttl : 7200 networkId : \"mainnet01\" signers : - public : 6be2f485a7af75fedb4b7f153a903f7e6000ca4aa501179c91a2450b777bd2a7 caps : - name : \"coin.TRANSFER\" args : [ \"alice\" , \"bob\" , 200.1 ] - name : \"coin.GAS\" args : [] - public : 368820f80c324bbc7c2b0610688a7da43e39f91d118732671cd9c7500ff43cca caps : - name : \"coin.TRANSFER\" args : [ \"bob\" , \"alice\" , 0.1 ] type : exec","title":"Safe Transfer"},{"location":"cookbook/safe-transfer/#safe-transfer","text":"Many cryptocurrencies are plagued by the problem of users losing coins by making a mistake with the public key they are transferring to and discovering that the private key they thought would control the money doesn't work. Pact allows you to construct coin transfers in a way that guarantees that someone is in possession of the correct private key and it will work to access the coins. This transaction does this by doing two transfers in a single transaction, one from alice to bob for the desired amount plus a small amount extra coins for a test transfer, and one from bob to alice transferring back the extra amount. This is most important when you are doing transfer-create because that is when you are defining the new account's keyset.","title":"Safe Transfer"},{"location":"cookbook/safe-transfer/#signing","text":"This transaction must be signed by both the alice and bob accounts and each signature must have the appropriate coin.TRANSFER capability. In this example, the public key for the account alice is 6be2f485a7af75fedb4b7f153a903f7e6000ca4aa501179c91a2450b777bd2a7 and the public key for bob is 368820f80c324bbc7c2b0610688a7da43e39f91d118732671cd9c7500ff43cca .","title":"Signing"},{"location":"cookbook/safe-transfer/#transaction-template","text":"code : |- (coin.transfer-create \"alice\" \"bob\" (read-keyset \"ks\") 200.1) (coin.transfer \"bob\" \"alice\" 0.1) data : ks : keys : [ 368820f80c324bbc7c2b0610688a7da43e39f91d118732671cd9c7500ff43cca ] pred : \"keys-all\" publicMeta : chainId : \"0\" sender : alice gasLimit : 1200 gasPrice : 0.00001 ttl : 7200 networkId : \"mainnet01\" signers : - public : 6be2f485a7af75fedb4b7f153a903f7e6000ca4aa501179c91a2450b777bd2a7 caps : - name : \"coin.TRANSFER\" args : [ \"alice\" , \"bob\" , 200.1 ] - name : \"coin.GAS\" args : [] - public : 368820f80c324bbc7c2b0610688a7da43e39f91d118732671cd9c7500ff43cca caps : - name : \"coin.TRANSFER\" args : [ \"bob\" , \"alice\" , 0.1 ] type : exec","title":"Transaction Template"}]}